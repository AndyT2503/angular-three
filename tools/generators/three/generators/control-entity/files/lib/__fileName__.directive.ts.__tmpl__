// GENERATED
import type { NgtCamera } from '@angular-three/core';
import { DestroyedService<% if (injectDocument) { %>, CanvasStore, AnimationStore<% } %> } from '@angular-three/core';<% if (injectDocument) { %>
import { DOCUMENT } from '@angular/common';<% } %>
import { Directive<% if (inputs.length) { %>, Input<% } %><% if (injectDocument) { %>, NgZone, Inject, SkipSelf<% }%> } from '@angular/core';<% if (useRenderer || inputs.length) { %>
import type { <% if (useRenderer) { %>WebGLRenderer, <% } %><% if (useScene) { %>Scene, <% } %><% for (const input of inputs) {%><%= input.import %>, <% } %> } from 'three';<% } %>
import * as THREE from 'three';
import { <%= name %> } from 'three/examples/jsm/controls/<%= name %>';
import { NgtControls } from '../../../src/lib/controls.abstract';

@Directive({
  selector: 'ngt-<%= fileName %>',
  exportAs: 'ngt<%= name %>',
  providers: [DestroyedService],
})
export class Ngt<%= name %> extends NgtControls<<%= name %>> {<% for (const input of inputs) { %>
  @Input() <%= input.name %><% if (input.isOptional) { %>?<% } %>: <%= input.import %><% if (input.isArray) { %>[]<% } %><% if (input.default) { %> = <%= input.default %>;<% } else { %>;<% } %><% } %><% if (injectDocument) { %>

  constructor(
    @Inject(DOCUMENT) private document: Document,
    ngZone: NgZone,
    @SkipSelf() protected canvasStore: CanvasStore,
    @SkipSelf() animationStore: AnimationStore,
    protected destroyed: DestroyedService
  ) {
    super(ngZone, canvasStore, animationStore, destroyed);
  }<% } %>

  initControls(camera: NgtCamera<% if (useRenderer) { %>, renderer: THREE.WebGLRenderer<% } %><% if (useScene) { %>, scene: THREE.Scene<% } %>): <%= name %> {
    return new <%= name %><%= constructor %>;
  }
}
