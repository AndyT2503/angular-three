// GENERATED
import {
    AnyConstructor,
    NgtCommonMaterial,
    provideCommonMaterialRef,<% if (hasBooleanInput) { %>coerceBooleanProperty, BooleanInput,<% } %><% if (hasNumberInput) { %> coerceNumberProperty, NumberInput,<% } %>
} from '@angular-three/core';
import { ChangeDetectionStrategy, Component, NgModule<% if (hasInput) { %>, Input<% } %> } from '@angular/core';
import * as THREE from 'three/src/Three';
<% if (extend && extend.path) { %>import { <%= extend.material %> } from '<%= extend.path %>'<% } %>

@Component({
    selector: 'ngt-<%= fileName %>',
    template: '<ng-content></ng-content>',
    changeDetection: ChangeDetectionStrategy.OnPush,
    providers: [provideCommonMaterialRef(Ngt<%= name %>)]
})
export class Ngt<%= name %><% if (typeDef) { %><<%= typeDef %>><% } %> extends <% if (extend && extend.material) { %><%= extend.material %><% } else { %>NgtCommonMaterial<% } %><
    THREE.<%= parameters %>,
    THREE.<%= name %>
> {
    static<% if (extend) { %> override<% } %> ngAcceptInputType_parameters:
        | THREE.<%= parameters %>
        | undefined;

    <% for (const input of inputs) { %>
    @Input() <% if (input.shouldOverride) { %>override <% } %>set <%= input.name %>(<%= input.name %>: <% if (input.isBooleanInput) { %>BooleanInput<% } else if (input.isNumberInput) { %>NumberInput<% } else { %><%= input.type %><% } %>) {
        this.set({ <% if (input.isBooleanInput || input.isNumberInput) { %><%= input.name %>: <% if (input.isNumberInput) { %>coerceNumberProperty<% } else { %>coerceBooleanProperty<% } %>(<%= input.name %>)<% } else { %><%= input.name %><% } %> });
    }
    <% } %>

    <% if (extend) { %>override <% } %>get materialType(): AnyConstructor<THREE.<%= name %>> {
        return THREE.<%= name %>;
    }
    <% if (hasInput) { %>
    protected override get optionFields(): Record<string, boolean> {
        return {
            ...super.optionFields,<% for (const input of inputs) { %>
            <%= input.name %>: <%= input.isOptional %>,<% } %>
        };
    }<% } %>
}

@NgModule({
    declarations: [Ngt<%= name %>],
    exports: [Ngt<%= name %>],
})
export class Ngt<%= name %>Module {}
