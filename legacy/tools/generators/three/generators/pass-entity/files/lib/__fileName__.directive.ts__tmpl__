// GENERATED
<% if (threeCoreImports.length) { %>import type {<% for (const coreImport of threeCoreImports) { %>
  <%= coreImport %>,<% } %>
} from '@angular-three/core';<% } %>
import { NgtPass } from '@angular-three/postprocessing';
import { Directive, Input } from '@angular/core';<% if (threeImports.length) { %>
import * as THREE from 'three';<% } %><% if (importFsQuad) { %>
import type { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass';<% } %><% if (importReflector) { %>
import type { Reflector } from 'three/examples/jsm/objects/ReflectorForSSRPass';<% } %><% if (passImports.length) { %>
import type {<% for (const passImport of passImports) { %>
 <%= passImport %>,<% } %>
} from 'three/examples/jsm/postprocessing/<%= name %>';<% } %>
import { <%= name %> } from 'three/examples/jsm/postprocessing/<%= name %>';

@Directive({
  selector: 'ngt-<%= fileName %>',
  exportAs: 'ngt<%= name %>',
  providers: [{ provide: NgtPass, useExisting: Ngt<%= name %> }],
})
export class Ngt<%= name %> extends NgtPass<<%= name %>> {
  static ngAcceptInputType_args:
    | <% if (sceneAndCamera === 'sceneAndCamera') { %>LessFirstTwoConstructorParameters<ConstructorParameters<typeof <%= name %>>> <% } else if (sceneAndCamera === 'camera') { %>LessFirstConstructorParameters<ConstructorParameters<typeof <%= name %>>><% } else { %>ConstructorParameters<typeof <%= name %>><% } %>
    | undefined;

  @Input() set args(v: <% if (sceneAndCamera === 'sceneAndCamera') { %>LessFirstTwoConstructorParameters<ConstructorParameters<typeof <%= name %>>> <% } else if (sceneAndCamera === 'camera') { %>LessFirstConstructorParameters<ConstructorParameters<typeof <%= name %>>><% } else { %>ConstructorParameters<typeof <%= name %>><% } %>) {
    this.extraArgs = v;
  }
  <% for (const input of inputs) { %>
  @Input() <%= input.name %>?: <%= input.import %><% if (input.isArray) { %>[]<% } %>;<% } %>

  passType = <%= name %>;<% if (inputs.length) { %>
  extraInputs = [<% for (const input of inputs) { %>
    '<%= input.name %>',<% } %>
  ];<% } %><% if (sceneAndCamera) { %>
  protected get useSceneAndCamera():
    | 'scene'
    | 'camera'
    | 'sceneAndCamera'
    | null {
    return '<%= sceneAndCamera %>';
  }<% } %>
}
