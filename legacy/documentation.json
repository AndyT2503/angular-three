{
    "pipes": [],
    "interfaces": [
        {
            "name": "NgtSobaEnvironmentState",
            "id": "interface-NgtSobaEnvironmentState-c6d332a0e36d6b14a7a0dfaa42ccd422ac740109a34e787408cac49b2f8a0d7734ae291f736876bcb85456da25ad309003c47ae26117e56de749d66bb7669fae",
            "file": "packages/soba/abstractions/src/lib/environment/environment.directive.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  CanvasStore,\n  EnhancedComponentStore,\n  LoaderService,\n  NgtCoreModule,\n} from '@angular-three/core';\nimport { presetsObj, PresetsType } from '@angular-three/soba';\nimport { Directive, Input, NgModule, NgZone, OnInit } from '@angular/core';\nimport { Observable, switchMap, tap, withLatestFrom } from 'rxjs';\nimport * as THREE from 'three';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\n\ninterface NgtSobaEnvironmentState {\n  path: string;\n  background?: boolean;\n  files?: string | string[];\n  scene?: THREE.Scene;\n  extensions?: (loader: THREE.Loader) => void;\n  texture?: THREE.Texture;\n  map?: THREE.Texture;\n  oldBg: THREE.Texture | THREE.Color | null;\n  oldEnv: THREE.Texture | null;\n  firstEnvironmentUpdate: boolean;\n}\n\nconst initialSobaEnvironmentState: NgtSobaEnvironmentState = {\n  background: false,\n  files: ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'],\n  path: '',\n  oldBg: null,\n  oldEnv: null,\n  firstEnvironmentUpdate: false,\n  scene: undefined,\n  extensions: undefined,\n  texture: undefined,\n  map: undefined,\n};\n\nconst CUBEMAP_ROOT =\n  'https://rawcdn.githack.com/pmndrs/drei-assets/aa3600359ba664d546d05821bcbca42013587df2';\n\n@Directive({\n  selector: 'ngt-soba-environment',\n  exportAs: 'ngtSobaEnvironment',\n})\nexport class NgtSobaEnvironment\n  extends EnhancedComponentStore<NgtSobaEnvironmentState>\n  implements OnInit\n{\n  @Input() set background(v: boolean) {\n    this.updaters.setBackground(v);\n  }\n\n  @Input() set files(v: string | string[]) {\n    this.updaters.setFiles(v);\n  }\n\n  @Input() set path(v: string) {\n    this.updaters.setPath(v);\n  }\n\n  @Input() set preset(v: PresetsType) {\n    this.updaters.setFiles(presetsObj[v]);\n    this.updaters.setPath(CUBEMAP_ROOT + '/hdri/');\n  }\n\n  @Input() set scene(v: THREE.Scene) {\n    this.updaters.setScene(v);\n  }\n\n  @Input() set extensions(v: (loader: THREE.Loader) => void) {\n    this.updaters.setExtensions(v);\n  }\n\n  changes$ = this.select(\n    this.selectors.texture$,\n    this.selectors.scene$,\n    this.selectors.background$,\n    (texture, scene, background) => ({ texture, scene, background }),\n    { debounce: true }\n  );\n\n  constructor(\n    private loaderService: LoaderService,\n    private ngZone: NgZone,\n    private canvasStore: CanvasStore\n  ) {\n    super(initialSobaEnvironmentState);\n  }\n\n  ngOnInit() {\n    this.updateTextureEffect(\n      this.selectors.files$.pipe(\n        withLatestFrom(this.selectors.path$, this.selectors.extensions$),\n        switchMap(([files, path, extensions]) => {\n          // TODO: fix any\n          const isCubeMap = Array.isArray(files);\n          return this.loaderService.use(\n            (isCubeMap ? THREE.CubeTextureLoader : RGBELoader) as any,\n            (isCubeMap ? [files] : files) as any,\n            (loader) => {\n              loader.setPath(path);\n              if (extensions) extensions(loader);\n            }\n          ) as Observable<THREE.Texture | THREE.Texture[]>;\n        })\n      )\n    );\n\n    this.updateEnvironmentEffect(\n      this.changes$ as Observable<{\n        texture: THREE.Texture;\n        scene: THREE.Scene;\n        background: boolean;\n      }>\n    );\n  }\n\n  readonly updateTextureEffect = this.effect<THREE.Texture | THREE.Texture[]>(\n    (loaderResult$) =>\n      loaderResult$.pipe(\n        withLatestFrom(this.canvasStore.selectors.renderer$),\n        tap(([loaderResult, renderer]) => {\n          this.ngZone.runOutsideAngular(() => {\n            const map = this.isCubeMap\n              ? (loaderResult as THREE.Texture[])[0]\n              : (loaderResult as THREE.Texture);\n\n            const gen = new THREE.PMREMGenerator(renderer!);\n            const texture = NgtSobaEnvironment.getTexture(\n              map,\n              gen,\n              this.isCubeMap\n            ) as THREE.Texture;\n            gen.dispose();\n\n            this.patchState({ map, texture });\n          });\n        })\n      )\n  );\n\n  readonly updateEnvironmentEffect = this.effect<{\n    texture: THREE.Texture;\n    scene: THREE.Scene;\n    background: boolean;\n  }>((params$) =>\n    params$.pipe(\n      withLatestFrom(\n        this.canvasStore.selectors.scene$,\n        this.selectors.firstEnvironmentUpdate$,\n        this.canvasStore.selectors.renderer$\n      ),\n      tap(\n        ([\n          { texture, scene, background },\n          defaultScene,\n          firstEnvironmentUpdate,\n        ]) => {\n          this.ngZone.runOutsideAngular(() => {\n            if (firstEnvironmentUpdate) {\n              this.cleanUpEffect();\n            }\n\n            const oldBg = scene ? scene.background : defaultScene!.background;\n            const oldEnv = scene\n              ? scene.environment\n              : defaultScene!.environment;\n\n            this.patchState({ oldBg, oldEnv });\n\n            if (scene) {\n              scene.environment = texture;\n              if (background) scene.background = texture;\n            } else {\n              defaultScene!.environment = texture;\n              if (background) defaultScene!.background = texture;\n            }\n\n            this.patchState({ firstEnvironmentUpdate: true });\n          });\n        }\n      )\n    )\n  );\n\n  cleanUpEffect = this.effect(($) =>\n    $.pipe(\n      withLatestFrom(\n        this.selectors.texture$,\n        this.selectors.scene$,\n        this.canvasStore.selectors.scene$,\n        this.selectors.oldBg$,\n        this.selectors.oldEnv$\n      ),\n      tap(([, texture, scene, defaultScene, oldBg, oldEnv]) => {\n        this.ngZone.runOutsideAngular(() => {\n          if (scene) {\n            scene.environment = oldEnv;\n            scene.background = oldBg;\n          } else {\n            defaultScene!.environment = oldEnv;\n            defaultScene!.background = oldBg;\n          }\n          texture!.dispose();\n        });\n      })\n    )\n  );\n\n  get isCubeMap() {\n    return Array.isArray(this.files);\n  }\n\n  ngOnDestroy() {\n    this.cleanUpEffect();\n    super.ngOnDestroy();\n  }\n\n  private static getTexture(\n    texture: THREE.Texture | THREE.CubeTexture,\n    gen: THREE.PMREMGenerator,\n    isCubeMap: boolean\n  ) {\n    if (isCubeMap) {\n      gen.compileEquirectangularShader();\n      return gen.fromCubemap(texture as THREE.CubeTexture).texture;\n    }\n    return gen.fromEquirectangular(texture).texture;\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaEnvironment],\n  exports: [NgtSobaEnvironment],\n  imports: [NgtCoreModule],\n})\nexport class NgtSobaEnvironmentModule {}\n",
            "properties": [
                {
                    "name": "background",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "extensions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "files",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[]",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "firstEnvironmentUpdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "map",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "THREE.Texture",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "oldBg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "THREE.Texture | THREE.Color | null",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "oldEnv",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "THREE.Texture | null",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "scene",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "THREE.Scene",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "texture",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "THREE.Texture",
                    "optional": true,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SobaOrthographicCameraState",
            "id": "interface-SobaOrthographicCameraState-837f1eede9680a6053994b9edcfa678f70caae6dc6f7f2c7a7c50a6b457cf00445a1dc8f0ade987c2059161339dc5ed03f73c7fbbf89166e55f3bb100f672f18",
            "file": "packages/soba/cameras/src/lib/orthographic-camera/orthographic-camera.store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  CanvasStore,\n  distinctKeyMap,\n  EnhancedComponentStore,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtObject3dController,\n  NgtSize,\n} from '@angular-three/core';\nimport { Inject, Injectable, NgZone, SimpleChanges } from '@angular/core';\nimport { Observable, of, tap, withLatestFrom } from 'rxjs';\nimport * as THREE from 'three';\n\nexport interface SobaOrthographicCameraState {\n  makeDefault?: boolean;\n  manual?: boolean;\n  near?: number;\n  far?: number;\n  orthographicCamera?: THREE.OrthographicCamera;\n  oldOrthographicCamera?: THREE.OrthographicCamera;\n}\n\ninterface UpdateProjectMatrixEffectParams {\n  size: NgtSize;\n  near: number;\n  far: number;\n  object3dControllerChanges: SimpleChanges;\n}\n\ninterface UpdateCameraEffectParams {\n  camera: THREE.OrthographicCamera;\n  orthographicCamera: THREE.OrthographicCamera;\n  makeDefault: boolean;\n}\n\nexport const initialSobaOrthographicCameraState: SobaOrthographicCameraState =\n  {};\n\n@Injectable()\nexport class SobaOrthographicCameraStore extends EnhancedComponentStore<SobaOrthographicCameraState> {\n  readonly size$ = this.canvasStore.selectors.internal$.pipe(\n    distinctKeyMap('size')\n  );\n\n  readonly projectMatrixParams$ = this.select(\n    this.size$,\n    this.selectors.near$,\n    this.selectors.far$,\n    this.object3dController.change$,\n    (size, near, far, object3dControllerChanges) => ({\n      size,\n      near,\n      far,\n      object3dControllerChanges,\n    }),\n    { debounce: true }\n  );\n\n  readonly cameraParams$ = this.select(\n    this.canvasStore.selectors.camera$,\n    this.selectors.orthographicCamera$,\n    this.selectors.makeDefault$,\n    (camera, orthographicCamera, makeDefault) => ({\n      camera,\n      orthographicCamera,\n      makeDefault,\n    }),\n    { debounce: true }\n  );\n\n  readonly vm$: Observable<{\n    left: number;\n    right: number;\n    top: number;\n    bottom: number;\n    near?: number;\n    far?: number;\n    object3dController: NgtObject3dController;\n  }> = this.select(\n    of(this.object3dController),\n    this.size$,\n    this.selectors.near$,\n    this.selectors.far$,\n    (object3dController, size, near, far) => ({\n      left: size.width / -2,\n      right: size.width / 2,\n      top: size.height / 2,\n      bottom: size.height / -2,\n      object3dController,\n      near,\n      far,\n    }),\n    { debounce: true }\n  );\n\n  constructor(\n    private canvasStore: CanvasStore,\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    private object3dController: NgtObject3dController,\n    private ngZone: NgZone\n  ) {\n    super(initialSobaOrthographicCameraState);\n  }\n\n  readonly initEffect = this.effect(($) =>\n    $.pipe(\n      tap(() => {\n        this.updateProjectMatrixEffect(\n          this\n            .projectMatrixParams$ as Observable<UpdateProjectMatrixEffectParams>\n        );\n        this.updateCameraEffect(\n          this.cameraParams$ as Observable<UpdateCameraEffectParams>\n        );\n      })\n    )\n  );\n\n  readonly updateProjectMatrixEffect =\n    this.effect<UpdateProjectMatrixEffectParams>((params$) =>\n      params$.pipe(\n        withLatestFrom(\n          this.selectors.manual$,\n          this.selectors.orthographicCamera$\n        ),\n        tap(([, manual, orthographicCamera]) => {\n          this.ngZone.runOutsideAngular(() => {\n            if (orthographicCamera && !manual) {\n              orthographicCamera.updateProjectionMatrix();\n            }\n          });\n        })\n      )\n    );\n\n  readonly updateCameraEffect = this.effect<UpdateCameraEffectParams>(\n    (params$) =>\n      params$.pipe(\n        tap(({ camera, orthographicCamera, makeDefault }) => {\n          this.ngZone.runOutsideAngular(() => {\n            if (makeDefault && orthographicCamera) {\n              this.patchState({ oldOrthographicCamera: camera });\n              this.canvasStore.patchState({ camera: orthographicCamera });\n            }\n          });\n        })\n      )\n  );\n\n  ngOnDestroy() {\n    const { oldOrthographicCamera } = this.getImperativeState();\n    this.canvasStore.patchState({ camera: oldOrthographicCamera });\n    super.ngOnDestroy();\n  }\n}\n",
            "properties": [
                {
                    "name": "far",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "makeDefault",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "manual",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "near",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "oldOrthographicCamera",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "THREE.OrthographicCamera",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "orthographicCamera",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "THREE.OrthographicCamera",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SobaPositionalAudioState",
            "id": "interface-SobaPositionalAudioState-1ca667e272447e498808cc3a5d6edfc9bbdbea6fdaad9337d992c72dc2eb0f783f1c8c75a976a54c9b9c2fb020dc4b44083fe9bf90aa41b5c8cc58a853ceb156",
            "file": "packages/soba/abstractions/src/lib/positional-audio/positional-audio.store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  CanvasStore,\n  EnhancedComponentStore,\n  LoaderService,\n  NgtCamera,\n  UnknownRecord,\n} from '@angular-three/core';\nimport { Injectable, NgZone } from '@angular/core';\nimport { switchMap, tap, withLatestFrom } from 'rxjs';\nimport * as THREE from 'three';\n\nexport interface SobaPositionalAudioState {\n  url: string;\n  distance: number;\n  loop: boolean;\n  listener: THREE.AudioListener;\n  sound: THREE.PositionalAudio | null;\n  autoplay: boolean;\n}\n\nexport const initialSobaPositionalAudioState: SobaPositionalAudioState = {\n  url: '',\n  distance: 1,\n  loop: true,\n  listener: new THREE.AudioListener(),\n  sound: null,\n  autoplay: false,\n};\n\n@Injectable()\nexport class SobaPositionalAudioStore extends EnhancedComponentStore<SobaPositionalAudioState> {\n  readonly buffer$ = this.selectors.url$.pipe(\n    switchMap((url) => this.loaderService.use(THREE.AudioLoader, url))\n  );\n\n  readonly changes$ = this.select(\n    this.buffer$,\n    this.canvasStore.selectors.camera$,\n    this.selectors.distance$,\n    this.selectors.loop$,\n    (buffer, camera, distance, loop) => ({ buffer, camera, distance, loop }),\n    { debounce: true }\n  );\n\n  constructor(\n    private loaderService: LoaderService,\n    private canvasStore: CanvasStore,\n    private ngZone: NgZone\n  ) {\n    super(initialSobaPositionalAudioState);\n  }\n\n  readonly initEffect = this.effect<boolean>((autoplay$) =>\n    autoplay$.pipe(\n      tap((autoplay) => {\n        this.initListenerEffect(autoplay);\n        this.changesEffect(this.changes$);\n      })\n    )\n  );\n\n  readonly changesEffect = this.effect<{\n    buffer: AudioBuffer;\n    camera: NgtCamera | undefined;\n    distance: number;\n    loop: boolean;\n  }>((params$) =>\n    params$.pipe(\n      withLatestFrom(this.selectors.sound$, this.selectors.autoplay$),\n      tap(([{ buffer, distance, loop }, sound, autoplay]) => {\n        if (sound) {\n          sound.setBuffer(buffer);\n          sound.setRefDistance(distance);\n          sound.setLoop(loop);\n          if (autoplay && !sound.isPlaying) {\n            sound.play();\n          }\n        }\n      })\n    )\n  );\n\n  readonly initListenerEffect = this.effect<boolean>((autoplay$) =>\n    autoplay$.pipe(\n      withLatestFrom(\n        this.canvasStore.selectors.camera$,\n        this.selectors.listener$\n      ),\n      tap(([autoplay, camera, listener]) => {\n        this.updaters.setAutoplay(autoplay);\n        this.ngZone.runOutsideAngular(() => {\n          if (camera) {\n            camera.add(listener);\n          }\n        });\n      })\n    )\n  );\n\n  readonly destroyEffect = this.effect(($) =>\n    $.pipe(\n      withLatestFrom(\n        this.canvasStore.selectors.camera$,\n        this.selectors.listener$,\n        this.selectors.sound$\n      ),\n      tap(([, camera, listener, sound]) => {\n        this.ngZone.runOutsideAngular(() => {\n          if (camera) {\n            camera.remove(listener);\n          }\n          if (sound) {\n            if (sound.isPlaying) {\n              sound.stop();\n            }\n\n            if (\n              sound.source &&\n              (sound.source as unknown as UnknownRecord)._connected\n            ) {\n              sound.disconnect();\n            }\n          }\n        });\n      })\n    )\n  );\n}\n",
            "properties": [
                {
                    "name": "autoplay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "distance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "listener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "THREE.AudioListener",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "loop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "sound",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "THREE.PositionalAudio | null",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "UpdateCameraEffectParams",
            "id": "interface-UpdateCameraEffectParams-837f1eede9680a6053994b9edcfa678f70caae6dc6f7f2c7a7c50a6b457cf00445a1dc8f0ade987c2059161339dc5ed03f73c7fbbf89166e55f3bb100f672f18",
            "file": "packages/soba/cameras/src/lib/orthographic-camera/orthographic-camera.store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  CanvasStore,\n  distinctKeyMap,\n  EnhancedComponentStore,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtObject3dController,\n  NgtSize,\n} from '@angular-three/core';\nimport { Inject, Injectable, NgZone, SimpleChanges } from '@angular/core';\nimport { Observable, of, tap, withLatestFrom } from 'rxjs';\nimport * as THREE from 'three';\n\nexport interface SobaOrthographicCameraState {\n  makeDefault?: boolean;\n  manual?: boolean;\n  near?: number;\n  far?: number;\n  orthographicCamera?: THREE.OrthographicCamera;\n  oldOrthographicCamera?: THREE.OrthographicCamera;\n}\n\ninterface UpdateProjectMatrixEffectParams {\n  size: NgtSize;\n  near: number;\n  far: number;\n  object3dControllerChanges: SimpleChanges;\n}\n\ninterface UpdateCameraEffectParams {\n  camera: THREE.OrthographicCamera;\n  orthographicCamera: THREE.OrthographicCamera;\n  makeDefault: boolean;\n}\n\nexport const initialSobaOrthographicCameraState: SobaOrthographicCameraState =\n  {};\n\n@Injectable()\nexport class SobaOrthographicCameraStore extends EnhancedComponentStore<SobaOrthographicCameraState> {\n  readonly size$ = this.canvasStore.selectors.internal$.pipe(\n    distinctKeyMap('size')\n  );\n\n  readonly projectMatrixParams$ = this.select(\n    this.size$,\n    this.selectors.near$,\n    this.selectors.far$,\n    this.object3dController.change$,\n    (size, near, far, object3dControllerChanges) => ({\n      size,\n      near,\n      far,\n      object3dControllerChanges,\n    }),\n    { debounce: true }\n  );\n\n  readonly cameraParams$ = this.select(\n    this.canvasStore.selectors.camera$,\n    this.selectors.orthographicCamera$,\n    this.selectors.makeDefault$,\n    (camera, orthographicCamera, makeDefault) => ({\n      camera,\n      orthographicCamera,\n      makeDefault,\n    }),\n    { debounce: true }\n  );\n\n  readonly vm$: Observable<{\n    left: number;\n    right: number;\n    top: number;\n    bottom: number;\n    near?: number;\n    far?: number;\n    object3dController: NgtObject3dController;\n  }> = this.select(\n    of(this.object3dController),\n    this.size$,\n    this.selectors.near$,\n    this.selectors.far$,\n    (object3dController, size, near, far) => ({\n      left: size.width / -2,\n      right: size.width / 2,\n      top: size.height / 2,\n      bottom: size.height / -2,\n      object3dController,\n      near,\n      far,\n    }),\n    { debounce: true }\n  );\n\n  constructor(\n    private canvasStore: CanvasStore,\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    private object3dController: NgtObject3dController,\n    private ngZone: NgZone\n  ) {\n    super(initialSobaOrthographicCameraState);\n  }\n\n  readonly initEffect = this.effect(($) =>\n    $.pipe(\n      tap(() => {\n        this.updateProjectMatrixEffect(\n          this\n            .projectMatrixParams$ as Observable<UpdateProjectMatrixEffectParams>\n        );\n        this.updateCameraEffect(\n          this.cameraParams$ as Observable<UpdateCameraEffectParams>\n        );\n      })\n    )\n  );\n\n  readonly updateProjectMatrixEffect =\n    this.effect<UpdateProjectMatrixEffectParams>((params$) =>\n      params$.pipe(\n        withLatestFrom(\n          this.selectors.manual$,\n          this.selectors.orthographicCamera$\n        ),\n        tap(([, manual, orthographicCamera]) => {\n          this.ngZone.runOutsideAngular(() => {\n            if (orthographicCamera && !manual) {\n              orthographicCamera.updateProjectionMatrix();\n            }\n          });\n        })\n      )\n    );\n\n  readonly updateCameraEffect = this.effect<UpdateCameraEffectParams>(\n    (params$) =>\n      params$.pipe(\n        tap(({ camera, orthographicCamera, makeDefault }) => {\n          this.ngZone.runOutsideAngular(() => {\n            if (makeDefault && orthographicCamera) {\n              this.patchState({ oldOrthographicCamera: camera });\n              this.canvasStore.patchState({ camera: orthographicCamera });\n            }\n          });\n        })\n      )\n  );\n\n  ngOnDestroy() {\n    const { oldOrthographicCamera } = this.getImperativeState();\n    this.canvasStore.patchState({ camera: oldOrthographicCamera });\n    super.ngOnDestroy();\n  }\n}\n",
            "properties": [
                {
                    "name": "camera",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "THREE.OrthographicCamera",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "makeDefault",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "orthographicCamera",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "THREE.OrthographicCamera",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "UpdateProjectMatrixEffectParams",
            "id": "interface-UpdateProjectMatrixEffectParams-837f1eede9680a6053994b9edcfa678f70caae6dc6f7f2c7a7c50a6b457cf00445a1dc8f0ade987c2059161339dc5ed03f73c7fbbf89166e55f3bb100f672f18",
            "file": "packages/soba/cameras/src/lib/orthographic-camera/orthographic-camera.store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  CanvasStore,\n  distinctKeyMap,\n  EnhancedComponentStore,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtObject3dController,\n  NgtSize,\n} from '@angular-three/core';\nimport { Inject, Injectable, NgZone, SimpleChanges } from '@angular/core';\nimport { Observable, of, tap, withLatestFrom } from 'rxjs';\nimport * as THREE from 'three';\n\nexport interface SobaOrthographicCameraState {\n  makeDefault?: boolean;\n  manual?: boolean;\n  near?: number;\n  far?: number;\n  orthographicCamera?: THREE.OrthographicCamera;\n  oldOrthographicCamera?: THREE.OrthographicCamera;\n}\n\ninterface UpdateProjectMatrixEffectParams {\n  size: NgtSize;\n  near: number;\n  far: number;\n  object3dControllerChanges: SimpleChanges;\n}\n\ninterface UpdateCameraEffectParams {\n  camera: THREE.OrthographicCamera;\n  orthographicCamera: THREE.OrthographicCamera;\n  makeDefault: boolean;\n}\n\nexport const initialSobaOrthographicCameraState: SobaOrthographicCameraState =\n  {};\n\n@Injectable()\nexport class SobaOrthographicCameraStore extends EnhancedComponentStore<SobaOrthographicCameraState> {\n  readonly size$ = this.canvasStore.selectors.internal$.pipe(\n    distinctKeyMap('size')\n  );\n\n  readonly projectMatrixParams$ = this.select(\n    this.size$,\n    this.selectors.near$,\n    this.selectors.far$,\n    this.object3dController.change$,\n    (size, near, far, object3dControllerChanges) => ({\n      size,\n      near,\n      far,\n      object3dControllerChanges,\n    }),\n    { debounce: true }\n  );\n\n  readonly cameraParams$ = this.select(\n    this.canvasStore.selectors.camera$,\n    this.selectors.orthographicCamera$,\n    this.selectors.makeDefault$,\n    (camera, orthographicCamera, makeDefault) => ({\n      camera,\n      orthographicCamera,\n      makeDefault,\n    }),\n    { debounce: true }\n  );\n\n  readonly vm$: Observable<{\n    left: number;\n    right: number;\n    top: number;\n    bottom: number;\n    near?: number;\n    far?: number;\n    object3dController: NgtObject3dController;\n  }> = this.select(\n    of(this.object3dController),\n    this.size$,\n    this.selectors.near$,\n    this.selectors.far$,\n    (object3dController, size, near, far) => ({\n      left: size.width / -2,\n      right: size.width / 2,\n      top: size.height / 2,\n      bottom: size.height / -2,\n      object3dController,\n      near,\n      far,\n    }),\n    { debounce: true }\n  );\n\n  constructor(\n    private canvasStore: CanvasStore,\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    private object3dController: NgtObject3dController,\n    private ngZone: NgZone\n  ) {\n    super(initialSobaOrthographicCameraState);\n  }\n\n  readonly initEffect = this.effect(($) =>\n    $.pipe(\n      tap(() => {\n        this.updateProjectMatrixEffect(\n          this\n            .projectMatrixParams$ as Observable<UpdateProjectMatrixEffectParams>\n        );\n        this.updateCameraEffect(\n          this.cameraParams$ as Observable<UpdateCameraEffectParams>\n        );\n      })\n    )\n  );\n\n  readonly updateProjectMatrixEffect =\n    this.effect<UpdateProjectMatrixEffectParams>((params$) =>\n      params$.pipe(\n        withLatestFrom(\n          this.selectors.manual$,\n          this.selectors.orthographicCamera$\n        ),\n        tap(([, manual, orthographicCamera]) => {\n          this.ngZone.runOutsideAngular(() => {\n            if (orthographicCamera && !manual) {\n              orthographicCamera.updateProjectionMatrix();\n            }\n          });\n        })\n      )\n    );\n\n  readonly updateCameraEffect = this.effect<UpdateCameraEffectParams>(\n    (params$) =>\n      params$.pipe(\n        tap(({ camera, orthographicCamera, makeDefault }) => {\n          this.ngZone.runOutsideAngular(() => {\n            if (makeDefault && orthographicCamera) {\n              this.patchState({ oldOrthographicCamera: camera });\n              this.canvasStore.patchState({ camera: orthographicCamera });\n            }\n          });\n        })\n      )\n  );\n\n  ngOnDestroy() {\n    const { oldOrthographicCamera } = this.getImperativeState();\n    this.canvasStore.patchState({ camera: oldOrthographicCamera });\n    super.ngOnDestroy();\n  }\n}\n",
            "properties": [
                {
                    "name": "far",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "near",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "object3dControllerChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SimpleChanges",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtSize",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "SobaOrthographicCameraStore",
            "id": "injectable-SobaOrthographicCameraStore-837f1eede9680a6053994b9edcfa678f70caae6dc6f7f2c7a7c50a6b457cf00445a1dc8f0ade987c2059161339dc5ed03f73c7fbbf89166e55f3bb100f672f18",
            "file": "packages/soba/cameras/src/lib/orthographic-camera/orthographic-camera.store.ts",
            "properties": [
                {
                    "name": "cameraParams$",
                    "defaultValue": "this.select(\n    this.canvasStore.selectors.camera$,\n    this.selectors.orthographicCamera$,\n    this.selectors.makeDefault$,\n    (camera, orthographicCamera, makeDefault) => ({\n      camera,\n      orthographicCamera,\n      makeDefault,\n    }),\n    { debounce: true }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "initEffect",
                    "defaultValue": "this.effect(($) =>\n    $.pipe(\n      tap(() => {\n        this.updateProjectMatrixEffect(\n          this\n            .projectMatrixParams$ as Observable<UpdateProjectMatrixEffectParams>\n        );\n        this.updateCameraEffect(\n          this.cameraParams$ as Observable<UpdateCameraEffectParams>\n        );\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "projectMatrixParams$",
                    "defaultValue": "this.select(\n    this.size$,\n    this.selectors.near$,\n    this.selectors.far$,\n    this.object3dController.change$,\n    (size, near, far, object3dControllerChanges) => ({\n      size,\n      near,\n      far,\n      object3dControllerChanges,\n    }),\n    { debounce: true }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "size$",
                    "defaultValue": "this.canvasStore.selectors.internal$.pipe(\n    distinctKeyMap('size')\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "updateCameraEffect",
                    "defaultValue": "this.effect<UpdateCameraEffectParams>(\n    (params$) =>\n      params$.pipe(\n        tap(({ camera, orthographicCamera, makeDefault }) => {\n          this.ngZone.runOutsideAngular(() => {\n            if (makeDefault && orthographicCamera) {\n              this.patchState({ oldOrthographicCamera: camera });\n              this.canvasStore.patchState({ camera: orthographicCamera });\n            }\n          });\n        })\n      )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 135,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "updateProjectMatrixEffect",
                    "defaultValue": "this.effect<UpdateProjectMatrixEffectParams>((params$) =>\n      params$.pipe(\n        withLatestFrom(\n          this.selectors.manual$,\n          this.selectors.orthographicCamera$\n        ),\n        tap(([, manual, orthographicCamera]) => {\n          this.ngZone.runOutsideAngular(() => {\n            if (orthographicCamera && !manual) {\n              orthographicCamera.updateProjectionMatrix();\n            }\n          });\n        })\n      )\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 118,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "vm$",
                    "defaultValue": "this.select(\n    of(this.object3dController),\n    this.size$,\n    this.selectors.near$,\n    this.selectors.far$,\n    (object3dController, size, near, far) => ({\n      left: size.width / -2,\n      right: size.width / 2,\n      top: size.height / 2,\n      bottom: size.height / -2,\n      object3dController,\n      near,\n      far,\n    }),\n    { debounce: true }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  CanvasStore,\n  distinctKeyMap,\n  EnhancedComponentStore,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtObject3dController,\n  NgtSize,\n} from '@angular-three/core';\nimport { Inject, Injectable, NgZone, SimpleChanges } from '@angular/core';\nimport { Observable, of, tap, withLatestFrom } from 'rxjs';\nimport * as THREE from 'three';\n\nexport interface SobaOrthographicCameraState {\n  makeDefault?: boolean;\n  manual?: boolean;\n  near?: number;\n  far?: number;\n  orthographicCamera?: THREE.OrthographicCamera;\n  oldOrthographicCamera?: THREE.OrthographicCamera;\n}\n\ninterface UpdateProjectMatrixEffectParams {\n  size: NgtSize;\n  near: number;\n  far: number;\n  object3dControllerChanges: SimpleChanges;\n}\n\ninterface UpdateCameraEffectParams {\n  camera: THREE.OrthographicCamera;\n  orthographicCamera: THREE.OrthographicCamera;\n  makeDefault: boolean;\n}\n\nexport const initialSobaOrthographicCameraState: SobaOrthographicCameraState =\n  {};\n\n@Injectable()\nexport class SobaOrthographicCameraStore extends EnhancedComponentStore<SobaOrthographicCameraState> {\n  readonly size$ = this.canvasStore.selectors.internal$.pipe(\n    distinctKeyMap('size')\n  );\n\n  readonly projectMatrixParams$ = this.select(\n    this.size$,\n    this.selectors.near$,\n    this.selectors.far$,\n    this.object3dController.change$,\n    (size, near, far, object3dControllerChanges) => ({\n      size,\n      near,\n      far,\n      object3dControllerChanges,\n    }),\n    { debounce: true }\n  );\n\n  readonly cameraParams$ = this.select(\n    this.canvasStore.selectors.camera$,\n    this.selectors.orthographicCamera$,\n    this.selectors.makeDefault$,\n    (camera, orthographicCamera, makeDefault) => ({\n      camera,\n      orthographicCamera,\n      makeDefault,\n    }),\n    { debounce: true }\n  );\n\n  readonly vm$: Observable<{\n    left: number;\n    right: number;\n    top: number;\n    bottom: number;\n    near?: number;\n    far?: number;\n    object3dController: NgtObject3dController;\n  }> = this.select(\n    of(this.object3dController),\n    this.size$,\n    this.selectors.near$,\n    this.selectors.far$,\n    (object3dController, size, near, far) => ({\n      left: size.width / -2,\n      right: size.width / 2,\n      top: size.height / 2,\n      bottom: size.height / -2,\n      object3dController,\n      near,\n      far,\n    }),\n    { debounce: true }\n  );\n\n  constructor(\n    private canvasStore: CanvasStore,\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    private object3dController: NgtObject3dController,\n    private ngZone: NgZone\n  ) {\n    super(initialSobaOrthographicCameraState);\n  }\n\n  readonly initEffect = this.effect(($) =>\n    $.pipe(\n      tap(() => {\n        this.updateProjectMatrixEffect(\n          this\n            .projectMatrixParams$ as Observable<UpdateProjectMatrixEffectParams>\n        );\n        this.updateCameraEffect(\n          this.cameraParams$ as Observable<UpdateCameraEffectParams>\n        );\n      })\n    )\n  );\n\n  readonly updateProjectMatrixEffect =\n    this.effect<UpdateProjectMatrixEffectParams>((params$) =>\n      params$.pipe(\n        withLatestFrom(\n          this.selectors.manual$,\n          this.selectors.orthographicCamera$\n        ),\n        tap(([, manual, orthographicCamera]) => {\n          this.ngZone.runOutsideAngular(() => {\n            if (orthographicCamera && !manual) {\n              orthographicCamera.updateProjectionMatrix();\n            }\n          });\n        })\n      )\n    );\n\n  readonly updateCameraEffect = this.effect<UpdateCameraEffectParams>(\n    (params$) =>\n      params$.pipe(\n        tap(({ camera, orthographicCamera, makeDefault }) => {\n          this.ngZone.runOutsideAngular(() => {\n            if (makeDefault && orthographicCamera) {\n              this.patchState({ oldOrthographicCamera: camera });\n              this.canvasStore.patchState({ camera: orthographicCamera });\n            }\n          });\n        })\n      )\n  );\n\n  ngOnDestroy() {\n    const { oldOrthographicCamera } = this.getImperativeState();\n    this.canvasStore.patchState({ camera: oldOrthographicCamera });\n    super.ngOnDestroy();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "canvasStore",
                        "type": "CanvasStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 93,
                "jsdoctags": [
                    {
                        "name": "canvasStore",
                        "type": "CanvasStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "EnhancedComponentStore",
            "type": "injectable"
        },
        {
            "name": "SobaPositionalAudioStore",
            "id": "injectable-SobaPositionalAudioStore-1ca667e272447e498808cc3a5d6edfc9bbdbea6fdaad9337d992c72dc2eb0f783f1c8c75a976a54c9b9c2fb020dc4b44083fe9bf90aa41b5c8cc58a853ceb156",
            "file": "packages/soba/abstractions/src/lib/positional-audio/positional-audio.store.ts",
            "properties": [
                {
                    "name": "buffer$",
                    "defaultValue": "this.selectors.url$.pipe(\n    switchMap((url) => this.loaderService.use(THREE.AudioLoader, url))\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "changes$",
                    "defaultValue": "this.select(\n    this.buffer$,\n    this.canvasStore.selectors.camera$,\n    this.selectors.distance$,\n    this.selectors.loop$,\n    (buffer, camera, distance, loop) => ({ buffer, camera, distance, loop }),\n    { debounce: true }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "changesEffect",
                    "defaultValue": "this.effect<{\n    buffer: AudioBuffer;\n    camera: NgtCamera | undefined;\n    distance: number;\n    loop: boolean;\n  }>((params$) =>\n    params$.pipe(\n      withLatestFrom(this.selectors.sound$, this.selectors.autoplay$),\n      tap(([{ buffer, distance, loop }, sound, autoplay]) => {\n        if (sound) {\n          sound.setBuffer(buffer);\n          sound.setRefDistance(distance);\n          sound.setLoop(loop);\n          if (autoplay && !sound.isPlaying) {\n            sound.play();\n          }\n        }\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "destroyEffect",
                    "defaultValue": "this.effect(($) =>\n    $.pipe(\n      withLatestFrom(\n        this.canvasStore.selectors.camera$,\n        this.selectors.listener$,\n        this.selectors.sound$\n      ),\n      tap(([, camera, listener, sound]) => {\n        this.ngZone.runOutsideAngular(() => {\n          if (camera) {\n            camera.remove(listener);\n          }\n          if (sound) {\n            if (sound.isPlaying) {\n              sound.stop();\n            }\n\n            if (\n              sound.source &&\n              (sound.source as unknown as UnknownRecord)._connected\n            ) {\n              sound.disconnect();\n            }\n          }\n        });\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "initEffect",
                    "defaultValue": "this.effect<boolean>((autoplay$) =>\n    autoplay$.pipe(\n      tap((autoplay) => {\n        this.initListenerEffect(autoplay);\n        this.changesEffect(this.changes$);\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "initListenerEffect",
                    "defaultValue": "this.effect<boolean>((autoplay$) =>\n    autoplay$.pipe(\n      withLatestFrom(\n        this.canvasStore.selectors.camera$,\n        this.selectors.listener$\n      ),\n      tap(([autoplay, camera, listener]) => {\n        this.updaters.setAutoplay(autoplay);\n        this.ngZone.runOutsideAngular(() => {\n          if (camera) {\n            camera.add(listener);\n          }\n        });\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  CanvasStore,\n  EnhancedComponentStore,\n  LoaderService,\n  NgtCamera,\n  UnknownRecord,\n} from '@angular-three/core';\nimport { Injectable, NgZone } from '@angular/core';\nimport { switchMap, tap, withLatestFrom } from 'rxjs';\nimport * as THREE from 'three';\n\nexport interface SobaPositionalAudioState {\n  url: string;\n  distance: number;\n  loop: boolean;\n  listener: THREE.AudioListener;\n  sound: THREE.PositionalAudio | null;\n  autoplay: boolean;\n}\n\nexport const initialSobaPositionalAudioState: SobaPositionalAudioState = {\n  url: '',\n  distance: 1,\n  loop: true,\n  listener: new THREE.AudioListener(),\n  sound: null,\n  autoplay: false,\n};\n\n@Injectable()\nexport class SobaPositionalAudioStore extends EnhancedComponentStore<SobaPositionalAudioState> {\n  readonly buffer$ = this.selectors.url$.pipe(\n    switchMap((url) => this.loaderService.use(THREE.AudioLoader, url))\n  );\n\n  readonly changes$ = this.select(\n    this.buffer$,\n    this.canvasStore.selectors.camera$,\n    this.selectors.distance$,\n    this.selectors.loop$,\n    (buffer, camera, distance, loop) => ({ buffer, camera, distance, loop }),\n    { debounce: true }\n  );\n\n  constructor(\n    private loaderService: LoaderService,\n    private canvasStore: CanvasStore,\n    private ngZone: NgZone\n  ) {\n    super(initialSobaPositionalAudioState);\n  }\n\n  readonly initEffect = this.effect<boolean>((autoplay$) =>\n    autoplay$.pipe(\n      tap((autoplay) => {\n        this.initListenerEffect(autoplay);\n        this.changesEffect(this.changes$);\n      })\n    )\n  );\n\n  readonly changesEffect = this.effect<{\n    buffer: AudioBuffer;\n    camera: NgtCamera | undefined;\n    distance: number;\n    loop: boolean;\n  }>((params$) =>\n    params$.pipe(\n      withLatestFrom(this.selectors.sound$, this.selectors.autoplay$),\n      tap(([{ buffer, distance, loop }, sound, autoplay]) => {\n        if (sound) {\n          sound.setBuffer(buffer);\n          sound.setRefDistance(distance);\n          sound.setLoop(loop);\n          if (autoplay && !sound.isPlaying) {\n            sound.play();\n          }\n        }\n      })\n    )\n  );\n\n  readonly initListenerEffect = this.effect<boolean>((autoplay$) =>\n    autoplay$.pipe(\n      withLatestFrom(\n        this.canvasStore.selectors.camera$,\n        this.selectors.listener$\n      ),\n      tap(([autoplay, camera, listener]) => {\n        this.updaters.setAutoplay(autoplay);\n        this.ngZone.runOutsideAngular(() => {\n          if (camera) {\n            camera.add(listener);\n          }\n        });\n      })\n    )\n  );\n\n  readonly destroyEffect = this.effect(($) =>\n    $.pipe(\n      withLatestFrom(\n        this.canvasStore.selectors.camera$,\n        this.selectors.listener$,\n        this.selectors.sound$\n      ),\n      tap(([, camera, listener, sound]) => {\n        this.ngZone.runOutsideAngular(() => {\n          if (camera) {\n            camera.remove(listener);\n          }\n          if (sound) {\n            if (sound.isPlaying) {\n              sound.stop();\n            }\n\n            if (\n              sound.source &&\n              (sound.source as unknown as UnknownRecord)._connected\n            ) {\n              sound.disconnect();\n            }\n          }\n        });\n      })\n    )\n  );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "canvasStore",
                        "type": "CanvasStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "canvasStore",
                        "type": "CanvasStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "EnhancedComponentStore",
            "type": "injectable"
        },
        {
            "name": "TextureLoaderService",
            "id": "injectable-TextureLoaderService-f9014632dc0c76b976aac5f1fc8a52a130f426d943825f1140e3695ed1d6cb71dbb7b1d50da2ec30b4fb6db5457485f69d44af949f760a012057d92e23c5a6c4",
            "file": "packages/soba/loaders/src/lib/texture-loader/texture-loader.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "load",
                    "args": [
                        {
                            "name": "input",
                            "type": "TInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [
                        "TInput"
                    ],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "TInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { CanvasStore, LoaderService } from '@angular-three/core';\nimport { Injectable } from '@angular/core';\nimport { combineLatest, map, Observable, tap } from 'rxjs';\nimport * as THREE from 'three';\n\nexport const IsObject = (url: any): url is Record<string, string> =>\n  url === Object(url) && !Array.isArray(url) && typeof url !== 'function';\n\n@Injectable({ providedIn: 'root' })\nexport class TextureLoaderService {\n  constructor(\n    private canvasStore: CanvasStore,\n    private loaderService: LoaderService\n  ) {}\n\n  load<TInput extends string | string[] | Record<string, string>>(\n    input: TInput\n  ): Observable<\n    TInput extends any[]\n      ? THREE.Texture[]\n      : TInput extends object\n      ? Record<keyof TInput, THREE.Texture>\n      : THREE.Texture\n  > {\n    return combineLatest([\n      this.canvasStore.selectors.renderer$,\n      this.loaderService.use(\n        THREE.TextureLoader,\n        IsObject(input) ? Object.values(input) : input\n      ),\n    ]).pipe(\n      tap(([renderer, textures]) => {\n        if (renderer) {\n          (Array.isArray(textures) ? textures : [textures]).forEach(\n            renderer.initTexture.bind(renderer)\n          );\n        }\n      }),\n      map(([, textures]) => {\n        if (IsObject(input)) {\n          return Object.keys(input).reduce((record, key, index) => {\n            record[key as keyof TInput] = (textures as THREE.Texture[])[index];\n            return record;\n          }, {} as Record<keyof TInput, THREE.Texture>);\n        }\n\n        return textures;\n      })\n    ) as Observable<\n      TInput extends any[]\n        ? THREE.Texture[]\n        : TInput extends object\n        ? Record<keyof TInput, THREE.Texture>\n        : THREE.Texture\n    >;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "canvasStore",
                        "type": "CanvasStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "canvasStore",
                        "type": "CanvasStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "NgtSobaEnvironment",
            "id": "directive-NgtSobaEnvironment-c6d332a0e36d6b14a7a0dfaa42ccd422ac740109a34e787408cac49b2f8a0d7734ae291f736876bcb85456da25ad309003c47ae26117e56de749d66bb7669fae",
            "file": "packages/soba/abstractions/src/lib/environment/environment.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  CanvasStore,\n  EnhancedComponentStore,\n  LoaderService,\n  NgtCoreModule,\n} from '@angular-three/core';\nimport { presetsObj, PresetsType } from '@angular-three/soba';\nimport { Directive, Input, NgModule, NgZone, OnInit } from '@angular/core';\nimport { Observable, switchMap, tap, withLatestFrom } from 'rxjs';\nimport * as THREE from 'three';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\n\ninterface NgtSobaEnvironmentState {\n  path: string;\n  background?: boolean;\n  files?: string | string[];\n  scene?: THREE.Scene;\n  extensions?: (loader: THREE.Loader) => void;\n  texture?: THREE.Texture;\n  map?: THREE.Texture;\n  oldBg: THREE.Texture | THREE.Color | null;\n  oldEnv: THREE.Texture | null;\n  firstEnvironmentUpdate: boolean;\n}\n\nconst initialSobaEnvironmentState: NgtSobaEnvironmentState = {\n  background: false,\n  files: ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'],\n  path: '',\n  oldBg: null,\n  oldEnv: null,\n  firstEnvironmentUpdate: false,\n  scene: undefined,\n  extensions: undefined,\n  texture: undefined,\n  map: undefined,\n};\n\nconst CUBEMAP_ROOT =\n  'https://rawcdn.githack.com/pmndrs/drei-assets/aa3600359ba664d546d05821bcbca42013587df2';\n\n@Directive({\n  selector: 'ngt-soba-environment',\n  exportAs: 'ngtSobaEnvironment',\n})\nexport class NgtSobaEnvironment\n  extends EnhancedComponentStore<NgtSobaEnvironmentState>\n  implements OnInit\n{\n  @Input() set background(v: boolean) {\n    this.updaters.setBackground(v);\n  }\n\n  @Input() set files(v: string | string[]) {\n    this.updaters.setFiles(v);\n  }\n\n  @Input() set path(v: string) {\n    this.updaters.setPath(v);\n  }\n\n  @Input() set preset(v: PresetsType) {\n    this.updaters.setFiles(presetsObj[v]);\n    this.updaters.setPath(CUBEMAP_ROOT + '/hdri/');\n  }\n\n  @Input() set scene(v: THREE.Scene) {\n    this.updaters.setScene(v);\n  }\n\n  @Input() set extensions(v: (loader: THREE.Loader) => void) {\n    this.updaters.setExtensions(v);\n  }\n\n  changes$ = this.select(\n    this.selectors.texture$,\n    this.selectors.scene$,\n    this.selectors.background$,\n    (texture, scene, background) => ({ texture, scene, background }),\n    { debounce: true }\n  );\n\n  constructor(\n    private loaderService: LoaderService,\n    private ngZone: NgZone,\n    private canvasStore: CanvasStore\n  ) {\n    super(initialSobaEnvironmentState);\n  }\n\n  ngOnInit() {\n    this.updateTextureEffect(\n      this.selectors.files$.pipe(\n        withLatestFrom(this.selectors.path$, this.selectors.extensions$),\n        switchMap(([files, path, extensions]) => {\n          // TODO: fix any\n          const isCubeMap = Array.isArray(files);\n          return this.loaderService.use(\n            (isCubeMap ? THREE.CubeTextureLoader : RGBELoader) as any,\n            (isCubeMap ? [files] : files) as any,\n            (loader) => {\n              loader.setPath(path);\n              if (extensions) extensions(loader);\n            }\n          ) as Observable<THREE.Texture | THREE.Texture[]>;\n        })\n      )\n    );\n\n    this.updateEnvironmentEffect(\n      this.changes$ as Observable<{\n        texture: THREE.Texture;\n        scene: THREE.Scene;\n        background: boolean;\n      }>\n    );\n  }\n\n  readonly updateTextureEffect = this.effect<THREE.Texture | THREE.Texture[]>(\n    (loaderResult$) =>\n      loaderResult$.pipe(\n        withLatestFrom(this.canvasStore.selectors.renderer$),\n        tap(([loaderResult, renderer]) => {\n          this.ngZone.runOutsideAngular(() => {\n            const map = this.isCubeMap\n              ? (loaderResult as THREE.Texture[])[0]\n              : (loaderResult as THREE.Texture);\n\n            const gen = new THREE.PMREMGenerator(renderer!);\n            const texture = NgtSobaEnvironment.getTexture(\n              map,\n              gen,\n              this.isCubeMap\n            ) as THREE.Texture;\n            gen.dispose();\n\n            this.patchState({ map, texture });\n          });\n        })\n      )\n  );\n\n  readonly updateEnvironmentEffect = this.effect<{\n    texture: THREE.Texture;\n    scene: THREE.Scene;\n    background: boolean;\n  }>((params$) =>\n    params$.pipe(\n      withLatestFrom(\n        this.canvasStore.selectors.scene$,\n        this.selectors.firstEnvironmentUpdate$,\n        this.canvasStore.selectors.renderer$\n      ),\n      tap(\n        ([\n          { texture, scene, background },\n          defaultScene,\n          firstEnvironmentUpdate,\n        ]) => {\n          this.ngZone.runOutsideAngular(() => {\n            if (firstEnvironmentUpdate) {\n              this.cleanUpEffect();\n            }\n\n            const oldBg = scene ? scene.background : defaultScene!.background;\n            const oldEnv = scene\n              ? scene.environment\n              : defaultScene!.environment;\n\n            this.patchState({ oldBg, oldEnv });\n\n            if (scene) {\n              scene.environment = texture;\n              if (background) scene.background = texture;\n            } else {\n              defaultScene!.environment = texture;\n              if (background) defaultScene!.background = texture;\n            }\n\n            this.patchState({ firstEnvironmentUpdate: true });\n          });\n        }\n      )\n    )\n  );\n\n  cleanUpEffect = this.effect(($) =>\n    $.pipe(\n      withLatestFrom(\n        this.selectors.texture$,\n        this.selectors.scene$,\n        this.canvasStore.selectors.scene$,\n        this.selectors.oldBg$,\n        this.selectors.oldEnv$\n      ),\n      tap(([, texture, scene, defaultScene, oldBg, oldEnv]) => {\n        this.ngZone.runOutsideAngular(() => {\n          if (scene) {\n            scene.environment = oldEnv;\n            scene.background = oldBg;\n          } else {\n            defaultScene!.environment = oldEnv;\n            defaultScene!.background = oldBg;\n          }\n          texture!.dispose();\n        });\n      })\n    )\n  );\n\n  get isCubeMap() {\n    return Array.isArray(this.files);\n  }\n\n  ngOnDestroy() {\n    this.cleanUpEffect();\n    super.ngOnDestroy();\n  }\n\n  private static getTexture(\n    texture: THREE.Texture | THREE.CubeTexture,\n    gen: THREE.PMREMGenerator,\n    isCubeMap: boolean\n  ) {\n    if (isCubeMap) {\n      gen.compileEquirectangularShader();\n      return gen.fromCubemap(texture as THREE.CubeTexture).texture;\n    }\n    return gen.fromEquirectangular(texture).texture;\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaEnvironment],\n  exports: [NgtSobaEnvironment],\n  imports: [NgtCoreModule],\n})\nexport class NgtSobaEnvironmentModule {}\n",
            "selector": "ngt-soba-environment",
            "providers": [],
            "inputsClass": [
                {
                    "name": "background",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "extensions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "files",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "preset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "scene",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "changes$",
                    "defaultValue": "this.select(\n    this.selectors.texture$,\n    this.selectors.scene$,\n    this.selectors.background$,\n    (texture, scene, background) => ({ texture, scene, background }),\n    { debounce: true }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "cleanUpEffect",
                    "defaultValue": "this.effect(($) =>\n    $.pipe(\n      withLatestFrom(\n        this.selectors.texture$,\n        this.selectors.scene$,\n        this.canvasStore.selectors.scene$,\n        this.selectors.oldBg$,\n        this.selectors.oldEnv$\n      ),\n      tap(([, texture, scene, defaultScene, oldBg, oldEnv]) => {\n        this.ngZone.runOutsideAngular(() => {\n          if (scene) {\n            scene.environment = oldEnv;\n            scene.background = oldBg;\n          } else {\n            defaultScene!.environment = oldEnv;\n            defaultScene!.background = oldBg;\n          }\n          texture!.dispose();\n        });\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 187
                },
                {
                    "name": "updateEnvironmentEffect",
                    "defaultValue": "this.effect<{\n    texture: THREE.Texture;\n    scene: THREE.Scene;\n    background: boolean;\n  }>((params$) =>\n    params$.pipe(\n      withLatestFrom(\n        this.canvasStore.selectors.scene$,\n        this.selectors.firstEnvironmentUpdate$,\n        this.canvasStore.selectors.renderer$\n      ),\n      tap(\n        ([\n          { texture, scene, background },\n          defaultScene,\n          firstEnvironmentUpdate,\n        ]) => {\n          this.ngZone.runOutsideAngular(() => {\n            if (firstEnvironmentUpdate) {\n              this.cleanUpEffect();\n            }\n\n            const oldBg = scene ? scene.background : defaultScene!.background;\n            const oldEnv = scene\n              ? scene.environment\n              : defaultScene!.environment;\n\n            this.patchState({ oldBg, oldEnv });\n\n            if (scene) {\n              scene.environment = texture;\n              if (background) scene.background = texture;\n            } else {\n              defaultScene!.environment = texture;\n              if (background) defaultScene!.background = texture;\n            }\n\n            this.patchState({ firstEnvironmentUpdate: true });\n          });\n        }\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 143,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "updateTextureEffect",
                    "defaultValue": "this.effect<THREE.Texture | THREE.Texture[]>(\n    (loaderResult$) =>\n      loaderResult$.pipe(\n        withLatestFrom(this.canvasStore.selectors.renderer$),\n        tap(([loaderResult, renderer]) => {\n          this.ngZone.runOutsideAngular(() => {\n            const map = this.isCubeMap\n              ? (loaderResult as THREE.Texture[])[0]\n              : (loaderResult as THREE.Texture);\n\n            const gen = new THREE.PMREMGenerator(renderer!);\n            const texture = NgtSobaEnvironment.getTexture(\n              map,\n              gen,\n              this.isCubeMap\n            ) as THREE.Texture;\n            gen.dispose();\n\n            this.patchState({ map, texture });\n          });\n        })\n      )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 119,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getTexture",
                    "args": [
                        {
                            "name": "texture",
                            "type": "THREE.Texture | THREE.CubeTexture",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "gen",
                            "type": "THREE.PMREMGenerator",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isCubeMap",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "texture",
                            "type": "THREE.Texture | THREE.CubeTexture",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "gen",
                            "type": "THREE.PMREMGenerator",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isCubeMap",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "canvasStore",
                        "type": "CanvasStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 81,
                "jsdoctags": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "canvasStore",
                        "type": "CanvasStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "background": {
                    "name": "background",
                    "setSignature": {
                        "name": "background",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 50,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "files": {
                    "name": "files",
                    "setSignature": {
                        "name": "files",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "string | string[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 54,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "string | string[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "path": {
                    "name": "path",
                    "setSignature": {
                        "name": "path",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 58,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "preset": {
                    "name": "preset",
                    "setSignature": {
                        "name": "preset",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "PresetsType",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 62,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "PresetsType",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "scene": {
                    "name": "scene",
                    "setSignature": {
                        "name": "scene",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "THREE.Scene",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 67,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "THREE.Scene",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "extensions": {
                    "name": "extensions",
                    "setSignature": {
                        "name": "extensions",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "function",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "function": [
                                    {
                                        "name": "loader",
                                        "type": "THREE.Loader",
                                        "deprecated": false,
                                        "deprecationMessage": ""
                                    }
                                ]
                            }
                        ],
                        "returnType": "void",
                        "line": 71,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "function",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "function": [
                                    {
                                        "name": "loader",
                                        "type": "THREE.Loader",
                                        "deprecated": false,
                                        "deprecationMessage": ""
                                    }
                                ],
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "isCubeMap": {
                    "name": "isCubeMap",
                    "getSignature": {
                        "name": "isCubeMap",
                        "type": "",
                        "returnType": "",
                        "line": 211
                    }
                }
            }
        },
        {
            "name": "NgtSobaExtender",
            "id": "directive-NgtSobaExtender-d2d28f2b7b52e5c533b49705c8d4129583283cc45f44727e7d2f2882e9b95bba14685c0f674c109a3544aa0f877775e7e657ccf5f88d2894a1408d08a30a46b3",
            "file": "packages/soba/src/lib/extender.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { NgtAnimationReady, NgtMaterial } from '@angular-three/core';\nimport { ContentChild, Directive, EventEmitter, Output } from '@angular/core';\n\n@Directive()\nexport abstract class NgtSobaExtender<TEntity> {\n  @Output() ready = new EventEmitter<TEntity>();\n  @Output() animateReady = new EventEmitter<NgtAnimationReady<TEntity>>();\n\n  @ContentChild(NgtMaterial) material?: NgtMaterial;\n}\n",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "animateReady",
                    "defaultValue": "new EventEmitter<NgtAnimationReady<TEntity>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "EventEmitter"
                },
                {
                    "name": "ready",
                    "defaultValue": "new EventEmitter<TEntity>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 6,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "material",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtMaterial",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "NgtMaterial"
                        }
                    ]
                }
            ],
            "methodsClass": []
        },
        {
            "name": "NgtSobaImageShaderMaterial",
            "id": "directive-NgtSobaImageShaderMaterial-074bc35ce8734adce23076362119fb0d02631efe0c3e8097055b3a565ccd7a4433e752ebe30e6686b8727772ccefd8b3a7ca531cc2662b4ed153081528750290",
            "file": "packages/soba/abstractions/src/lib/image/image-shader-material.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { NgtColor, NgtMaterial } from '@angular-three/core';\nimport { Directive } from '@angular/core';\nimport * as THREE from 'three';\nimport { shaderMaterial } from '../shader-material/shader-material';\n\nexport type SobaImageShaderMaterialParameters =\n  THREE.ShaderMaterialParameters & {\n    scale?: number[];\n    imageBounds?: number[];\n    color?: NgtColor;\n    map: THREE.Texture;\n    zoom?: number;\n    grayscale?: number;\n  };\n\nexport const ImageShaderMaterial = shaderMaterial(\n  {\n    color: new THREE.Color('white'),\n    scale: [1, 1],\n    imageBounds: [1, 1],\n    map: null,\n    zoom: 1,\n    grayscale: 0,\n  },\n  // language=glsl\n  `\n  varying vec2 vUv;\n  void main() {\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\n    vUv = uv;\n  }\n`,\n  // language=glsl\n  `\n  // mostly from https://gist.github.com/statico/df64c5d167362ecf7b34fca0b1459a44\n  varying vec2 vUv;\n  uniform vec2 scale;\n  uniform vec2 imageBounds;\n  uniform vec3 color;\n  uniform sampler2D map;\n  uniform float zoom;\n  uniform float grayscale;\n  const vec3 luma = vec3(.299, 0.587, 0.114);\n  vec4 toGrayscale(vec4 color, float intensity) {\n    return vec4(mix(color.rgb, vec3(dot(color.rgb, luma)), intensity), color.a);\n  }\n  vec2 aspect(vec2 size) {\n    return size / min(size.x, size.y);\n  }\n  void main() {\n    vec2 s = aspect(scale);\n    vec2 i = aspect(imageBounds);\n    float rs = s.x / s.y;\n    float ri = i.x / i.y;\n    vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\n    vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\n    vec2 uv = vUv * s / new + offset;\n    vec2 zUv = (uv - vec2(0.5, 0.5)) / zoom + vec2(0.5, 0.5);\n    gl_FragColor = toGrayscale(texture2D(map, zUv) * vec4(color, 1.0), grayscale);\n  }\n`\n);\n\n@Directive({\n  selector: 'ngt-soba-image-shader-material',\n  exportAs: 'ngtSobaImageShaderMaterial',\n  providers: [\n    { provide: NgtMaterial, useExisting: NgtSobaImageShaderMaterial },\n  ],\n})\nexport class NgtSobaImageShaderMaterial extends NgtMaterial<\n  SobaImageShaderMaterialParameters,\n  typeof ImageShaderMaterial.prototype\n> {\n  static ngAcceptInputType_parameters:\n    | SobaImageShaderMaterialParameters\n    | undefined;\n\n  materialType = ImageShaderMaterial;\n}\n",
            "selector": "ngt-soba-image-shader-material",
            "providers": [
                {
                    "name": "{ provide: NgtMaterial, useExisting: NgtSobaImageShaderMaterial }"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "materialType",
                    "defaultValue": "ImageShaderMaterial",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "ngAcceptInputType_parameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SobaImageShaderMaterialParameters | undefined",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": []
        },
        {
            "name": "NgtSobaLineController",
            "id": "directive-NgtSobaLineController-7c627c60138e3d1bb7e178ffdee02a5732e6c6433e42f346d85ac7e8f633ec3eee9352b8ae23634d0bf63047ba725fbfbb08eabc94143fa0b4fc5cac5658afeb",
            "file": "packages/soba/abstractions/src/lib/line/line.controller.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Controller, NgtAnimationReady, NgtColor } from '@angular-three/core';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  NgZone,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport { Line2 } from 'three/examples/jsm/lines/Line2';\nimport { LineGeometry } from 'three/examples/jsm/lines/LineGeometry';\nimport {\n  LineMaterial,\n  LineMaterialParameters,\n} from 'three/examples/jsm/lines/LineMaterial';\n\n@Directive({\n  selector:\n    'ngt-soba-line,ngt-soba-quadratic-bezier-line,ngt-soba-cubic-bezier-line',\n  exportAs: 'ngtSobaLineController',\n})\nexport class NgtSobaLineController extends Controller {\n  @Input() vertexColors?: Array<NgtColor>;\n\n  @Input() color: NgtColor = 'black';\n  @Input() lineWidth?: LineMaterialParameters['linewidth'];\n  @Input() dashed?: LineMaterialParameters['dashed'];\n\n  @Input() materialParameters?: Omit<\n    LineMaterialParameters,\n    'vertexColors' | 'color' | 'linewidth' | 'dashed' | 'resolution'\n  > = {};\n\n  @Input() sobaLineController?: NgtSobaLineController;\n\n  @Output() ready = new EventEmitter<Line2>();\n  @Output() animateReady = new EventEmitter<NgtAnimationReady<Line2>>();\n\n  parameters!: LineMaterialParameters;\n  line!: Line2;\n  geometry!: LineGeometry;\n  material!: LineMaterial;\n\n  get props(): string[] {\n    return [\n      'vertexColors',\n      'color',\n      'lineWidth',\n      'dashed',\n      'materialParameters',\n      'ready',\n      'animateReady',\n      'parameters',\n      'line',\n      'geometry',\n      'material',\n    ];\n  }\n\n  get controller(): Controller | undefined {\n    return this.sobaLineController;\n  }\n\n  constructor(ngZone: NgZone) {\n    super(ngZone);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    super.ngOnChanges(changes);\n    this.ngZone.runOutsideAngular(() => {\n      this.parameters = {\n        color: this.color as number,\n        linewidth: this.lineWidth,\n        dashed: this.dashed,\n        vertexColors: Boolean(this.vertexColors),\n        ...this.materialParameters,\n      };\n\n      if (changes.vertexColors) {\n        if (this.line) {\n          this.line.computeLineDistances();\n        }\n      }\n\n      if (changes.dashed) {\n        if (this.material) {\n          this.dasherize();\n        }\n      }\n    });\n  }\n\n  mergeParameters(extra: Record<string, unknown> = {}) {\n    this.parameters = Object.assign(this.parameters || {}, extra);\n  }\n\n  onLineReady(line: Line2) {\n    this.ngZone.runOutsideAngular(() => {\n      this.line = line;\n      this.line.computeLineDistances();\n      this.ngZone.run(() => {\n        this.ready.emit(line);\n      });\n    });\n  }\n\n  onMaterialReady(material: LineMaterial) {\n    this.ngZone.runOutsideAngular(() => {\n      this.material = material;\n      this.dasherize();\n    });\n  }\n\n  private dasherize() {\n    if (this.dashed) {\n      this.material.defines.USE_DASH = '';\n    } else {\n      delete this.material.defines.USE_DASH;\n    }\n  }\n}\n",
            "selector": "ngt-soba-line,ngt-soba-quadratic-bezier-line,ngt-soba-cubic-bezier-line",
            "providers": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'black'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "NgtColor",
                    "decorators": []
                },
                {
                    "name": "dashed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "lineWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "materialParameters",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "Omit<LineMaterialParameters | \"vertexColors\" | \"color\" | \"linewidth\" | \"dashed\" | \"resolution\">",
                    "decorators": []
                },
                {
                    "name": "sobaLineController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "NgtSobaLineController",
                    "decorators": []
                },
                {
                    "name": "vertexColors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "Array<NgtColor>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "animateReady",
                    "defaultValue": "new EventEmitter<NgtAnimationReady<Line2>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter"
                },
                {
                    "name": "ready",
                    "defaultValue": "new EventEmitter<Line2>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "geometry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LineGeometry",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "line",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Line2",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "material",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LineMaterial",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "parameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LineMaterialParameters",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "dasherize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "mergeParameters",
                    "args": [
                        {
                            "name": "extra",
                            "type": "Record<string | >",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "extra",
                            "type": "Record<string | >",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLineReady",
                    "args": [
                        {
                            "name": "line",
                            "type": "Line2",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "line",
                            "type": "Line2",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMaterialReady",
                    "args": [
                        {
                            "name": "material",
                            "type": "LineMaterial",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "material",
                            "type": "LineMaterial",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 44
                    }
                },
                "controller": {
                    "name": "controller",
                    "getSignature": {
                        "name": "controller",
                        "type": "",
                        "returnType": "Controller | undefined",
                        "line": 60
                    }
                }
            }
        },
        {
            "name": "NgtSobaTextContent",
            "id": "directive-NgtSobaTextContent-82d63a0d3020f34017adb758d3a9137057d38ebf2fd1f44d10858ef2ed5d966df45abfca969ebeed61df325fbb5cdc746261deb6a6206d93ec95695073e8c384",
            "file": "packages/soba/abstractions/src/lib/text/text-content.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, NgZone, OnInit } from '@angular/core';\n\n@Directive({\n  selector: 'ngt-soba-text-content',\n  exportAs: 'ngtSobaTextContent',\n})\nexport class NgtSobaTextContent implements OnInit {\n  private _text = '';\n\n  constructor(\n    private ngZone: NgZone,\n    private el: ElementRef<HTMLUnknownElement>\n  ) {}\n\n  ngOnInit() {\n    this.ngZone.runOutsideAngular(() => {\n      this.el.nativeElement.childNodes.forEach((childNode) => {\n        if (childNode instanceof Text) {\n          this._text += childNode.wholeText;\n        }\n      });\n    });\n  }\n\n  get text() {\n    return this._text.trim();\n  }\n}\n",
            "selector": "ngt-soba-text-content",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_text",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef<HTMLUnknownElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef<HTMLUnknownElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "text": {
                    "name": "text",
                    "getSignature": {
                        "name": "text",
                        "type": "",
                        "returnType": "",
                        "line": 25
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "NgtSobaBillboard",
            "id": "component-NgtSobaBillboard-35fcd4030c8a72ff08139ac7f262695c919de148492f410783f66a0c8b840da3ecc9b8c75ba2c024ab3f3cb0ec2e33d7bae652feefea4e5963046ea316af65c5",
            "file": "packages/soba/abstractions/src/lib/billboard/billboard.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "ngtSobaBillboard",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NGT_OBJECT_3D_CONTROLLER_PROVIDER",
                    "type": "controller"
                }
            ],
            "selector": "ngt-soba-billboard",
            "styleUrls": [],
            "styles": [],
            "template": "<ngt-group\n  (ready)=\"ready.emit($event)\"\n  (animateReady)=\"animateReady.emit($event); onAnimateReady($event)\"\n  [object3dController]=\"object3dController\"\n>\n  <ng-content></ng-content>\n</ngt-group>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "follow",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "lockX",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "lockY",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "lockZ",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "animateReady",
                    "defaultValue": "new EventEmitter<NgtAnimationReady<TEntity>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                },
                {
                    "name": "ready",
                    "defaultValue": "new EventEmitter<TEntity>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 6,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtGroup",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "NgtGroup, {static: true}"
                        }
                    ]
                },
                {
                    "name": "object3dController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtObject3dController",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_OBJECT_3D_WATCHED_CONTROLLER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "material",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtMaterial",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "NgtMaterial"
                        }
                    ],
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "onAnimateReady",
                    "args": [
                        {
                            "type": "NgtAnimationReady<THREE.Group>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "NgtAnimationReady<THREE.Group>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtAnimationReady,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtGroup, NgtGroupModule } from '@angular-three/core/group';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n  ViewChild,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-billboard',\n  exportAs: 'ngtSobaBillboard',\n  template: `\n    <ngt-group\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event); onAnimateReady($event)\"\n      [object3dController]=\"object3dController\"\n    >\n      <ng-content></ng-content>\n    </ngt-group>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaBillboard extends NgtSobaExtender<THREE.Group> {\n  @Input() follow = true;\n  @Input() lockX = false;\n  @Input() lockY = false;\n  @Input() lockZ = false;\n\n  @ViewChild(NgtGroup, { static: true }) group!: NgtGroup;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n\n  onAnimateReady({\n    animateObject,\n    renderState: { camera },\n  }: NgtAnimationReady<THREE.Group>) {\n    if (!this.follow) return;\n\n    // save previous rotation in case we're locking an axis\n    const prevRotation = animateObject.rotation.clone();\n\n    // always face the camera\n    animateObject.quaternion.copy(camera.quaternion);\n\n    // readjust any axis that is locked\n    if (this.lockX) animateObject.rotation.x = prevRotation.x;\n    if (this.lockY) animateObject.rotation.y = prevRotation.y;\n    if (this.lockZ) animateObject.rotation.z = prevRotation.z;\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaBillboard],\n  exports: [NgtSobaBillboard],\n  imports: [NgtCoreModule, NgtGroupModule],\n})\nexport class NgtSobaBillboardModule {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NgtSobaExtender"
        },
        {
            "name": "NgtSobaBox",
            "id": "component-NgtSobaBox-dfec90604221d1b1f85b65f1fc8f1ea53198a128d898ff8c534f055120c492c961385fa3fe0fa752a9447464cb5deba3dd3649d3d4f0a831cf98104a45f45a62",
            "file": "packages/soba/shapes/src/lib/box/box.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "ngtSobaBox",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NGT_OBJECT_3D_CONTROLLER_PROVIDER",
                    "type": "controller"
                }
            ],
            "selector": "ngt-soba-box",
            "styleUrls": [],
            "styles": [],
            "template": "<ngt-mesh\n  (ready)=\"ready.emit($event)\"\n  (animateReady)=\"animateReady.emit($event)\"\n  [object3dController]=\"object3dController\"\n  [material]=\"material?.material\"\n>\n  <ngt-box-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-box-geometry>\n  <ng-template #withoutArgs>\n    <ngt-box-geometry></ngt-box-geometry>\n  </ng-template>\n</ngt-mesh>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "args",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "ConstructorParameters<>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "animateReady",
                    "defaultValue": "new EventEmitter<NgtAnimationReady<TEntity>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                },
                {
                    "name": "ready",
                    "defaultValue": "new EventEmitter<TEntity>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 6,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "object3dController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtObject3dController",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_OBJECT_3D_WATCHED_CONTROLLER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "material",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtMaterial",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "NgtMaterial"
                        }
                    ],
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtBoxGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-box',\n  exportAs: 'ngtSobaBox',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-box-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-box-geometry>\n      <ng-template #withoutArgs>\n        <ngt-box-geometry></ngt-box-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaBox extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.BoxGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaBox],\n  exports: [NgtSobaBox],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtBoxGeometryModule],\n})\nexport class NgtSobaBoxModule {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NgtSobaExtender"
        },
        {
            "name": "NgtSobaCircle",
            "id": "component-NgtSobaCircle-20a878bee577a5c08300f9e395a8c62b529eadf83cadebd332ffd8ac9ed35d55ef4ecdd8ce8c8ebb3cc76b9eb96a540050a698e57e98faa76cf52db89219a03e",
            "file": "packages/soba/shapes/src/lib/circle/circle.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "ngtSobaCircle",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NGT_OBJECT_3D_CONTROLLER_PROVIDER",
                    "type": "controller"
                }
            ],
            "selector": "ngt-soba-circle",
            "styleUrls": [],
            "styles": [],
            "template": "<ngt-mesh\n  (ready)=\"ready.emit($event)\"\n  (animateReady)=\"animateReady.emit($event)\"\n  [object3dController]=\"object3dController\"\n  [material]=\"material?.material\"\n>\n  <ngt-circle-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-circle-geometry>\n  <ng-template #withoutArgs>\n    <ngt-circle-geometry></ngt-circle-geometry>\n  </ng-template>\n</ngt-mesh>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "args",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "ConstructorParameters<>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "animateReady",
                    "defaultValue": "new EventEmitter<NgtAnimationReady<TEntity>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                },
                {
                    "name": "ready",
                    "defaultValue": "new EventEmitter<TEntity>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 6,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "object3dController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtObject3dController",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_OBJECT_3D_WATCHED_CONTROLLER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "material",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtMaterial",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "NgtMaterial"
                        }
                    ],
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtCircleGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-circle',\n  exportAs: 'ngtSobaCircle',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-circle-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-circle-geometry>\n      <ng-template #withoutArgs>\n        <ngt-circle-geometry></ngt-circle-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaCircle extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.CircleGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaCircle],\n  exports: [NgtSobaCircle],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtCircleGeometryModule],\n})\nexport class NgtSobaCircleModule {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NgtSobaExtender"
        },
        {
            "name": "NgtSobaCone",
            "id": "component-NgtSobaCone-5d9bfe7249923a0435db8e19f9f831790c1225a815e40f6c011b2f300025f401bcc2937186dac7dbc00d56fc5517ea3c519ff338d3ff34356cf451ed0d7560a1",
            "file": "packages/soba/shapes/src/lib/cone/cone.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "ngtSobaCone",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NGT_OBJECT_3D_CONTROLLER_PROVIDER",
                    "type": "controller"
                }
            ],
            "selector": "ngt-soba-cone",
            "styleUrls": [],
            "styles": [],
            "template": "<ngt-mesh\n  (ready)=\"ready.emit($event)\"\n  (animateReady)=\"animateReady.emit($event)\"\n  [object3dController]=\"object3dController\"\n  [material]=\"material?.material\"\n>\n  <ngt-cone-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-cone-geometry>\n  <ng-template #withoutArgs>\n    <ngt-cone-geometry></ngt-cone-geometry>\n  </ng-template>\n</ngt-mesh>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "args",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "ConstructorParameters<>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "animateReady",
                    "defaultValue": "new EventEmitter<NgtAnimationReady<TEntity>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                },
                {
                    "name": "ready",
                    "defaultValue": "new EventEmitter<TEntity>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 6,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "object3dController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtObject3dController",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_OBJECT_3D_WATCHED_CONTROLLER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "material",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtMaterial",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "NgtMaterial"
                        }
                    ],
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtConeGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-cone',\n  exportAs: 'ngtSobaCone',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-cone-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-cone-geometry>\n      <ng-template #withoutArgs>\n        <ngt-cone-geometry></ngt-cone-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaCone extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.ConeGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaCone],\n  exports: [NgtSobaCone],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtConeGeometryModule],\n})\nexport class NgtSobaConeModule {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NgtSobaExtender"
        },
        {
            "name": "NgtSobaCubicBezierLine",
            "id": "component-NgtSobaCubicBezierLine-68c8769f9dfdf20f0b2f0126e1b645619d144d1ede3603c3cdcfd54b67349c0ba23256cebcc22aa98d2b765ee510fdc4a978525bae70ee9ce3d8e6667599965f",
            "file": "packages/soba/abstractions/src/lib/cubic-bezier-line/cubic-bezier-line.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "ngtSobaCubicBezierLine",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NGT_SOBA_LINE_CONTROLLER_PROVIDER",
                    "type": "controller"
                }
            ],
            "selector": "ngt-soba-cubic-bezier-line[start][end][midA][midB]",
            "styleUrls": [],
            "styles": [],
            "template": "<ngt-soba-line\n  [points]=\"points\"\n  [object3dController]=\"object3dController\"\n  [sobaLineController]=\"sobaLineController\"\n></ngt-soba-line>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "end",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "NgtVector3",
                    "decorators": []
                },
                {
                    "name": "midA",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "NgtVector3",
                    "decorators": []
                },
                {
                    "name": "midB",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "NgtVector3",
                    "decorators": []
                },
                {
                    "name": "segments",
                    "defaultValue": "20",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "start",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "NgtVector3",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "object3dController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtObject3dController",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_OBJECT_3D_WATCHED_CONTROLLER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "points",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<NgtVector3>",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "sobaLineController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtSobaLineController",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_SOBA_LINE_WATCHED_CONTROLLER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "buildPoints",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n  NgtVector3,\n} from '@angular-three/core';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n  NgZone,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n} from '@angular/core';\nimport * as THREE from 'three';\nimport {\n  NGT_SOBA_LINE_CONTROLLER_PROVIDER,\n  NGT_SOBA_LINE_WATCHED_CONTROLLER,\n} from '../line/line-watched-controller.di';\nimport { NgtSobaLineModule } from '../line/line.component';\nimport { NgtSobaLineController } from '../line/line.controller';\n\n@Component({\n  selector: 'ngt-soba-cubic-bezier-line[start][end][midA][midB]',\n  exportAs: 'ngtSobaCubicBezierLine',\n  template: `\n    <ngt-soba-line\n      [points]=\"points\"\n      [object3dController]=\"object3dController\"\n      [sobaLineController]=\"sobaLineController\"\n    ></ngt-soba-line>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_SOBA_LINE_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaCubicBezierLine implements OnInit, OnChanges {\n  @Input() start!: NgtVector3;\n  @Input() end!: NgtVector3;\n  @Input() midA!: NgtVector3;\n  @Input() midB!: NgtVector3;\n  @Input() segments?: number = 20;\n\n  points!: Array<NgtVector3>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController,\n    @Inject(NGT_SOBA_LINE_WATCHED_CONTROLLER)\n    public sobaLineController: NgtSobaLineController,\n    private ngZone: NgZone\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.ngZone.runOutsideAngular(() => {\n      if (changes.start || changes.end || changes.mid || changes.segments) {\n        this.buildPoints();\n      }\n    });\n  }\n\n  ngOnInit() {\n    if (!this.points) {\n      this.buildPoints();\n    }\n  }\n\n  private buildPoints() {\n    const startV =\n      this.start instanceof THREE.Vector3\n        ? this.start\n        : new THREE.Vector3(...(this.start as number[]));\n    const endV =\n      this.end instanceof THREE.Vector3\n        ? this.end\n        : new THREE.Vector3(...(this.end as number[]));\n    const midAV =\n      this.midA instanceof THREE.Vector3\n        ? this.midA\n        : new THREE.Vector3(...(this.midA as number[]));\n    const midBV =\n      this.midB instanceof THREE.Vector3\n        ? this.midB\n        : new THREE.Vector3(...(this.midB as number[]));\n    this.points = new THREE.CubicBezierCurve3(\n      startV,\n      midAV,\n      midBV,\n      endV\n    ).getPoints(this.segments);\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaCubicBezierLine],\n  exports: [NgtSobaCubicBezierLine],\n  imports: [NgtCoreModule, NgtSobaLineModule],\n})\nexport class NgtSobaCubicBezierLineModule {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sobaLineController",
                        "type": "NgtSobaLineController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sobaLineController",
                        "type": "NgtSobaLineController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ]
        },
        {
            "name": "NgtSobaCylinder",
            "id": "component-NgtSobaCylinder-161e78b47cb19b624e12273847a3af2d1b6f96487bbd74ac1adbd76f4f5d8142ffca2f196ef636da4d054a180d8d606e0ffec213b7b4f895a10ab866379b5700",
            "file": "packages/soba/shapes/src/lib/cylinder/cylinder.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "ngtSobaCylinder",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NGT_OBJECT_3D_CONTROLLER_PROVIDER",
                    "type": "controller"
                }
            ],
            "selector": "ngt-soba-cylinder",
            "styleUrls": [],
            "styles": [],
            "template": "<ngt-mesh\n  (ready)=\"ready.emit($event)\"\n  (animateReady)=\"animateReady.emit($event)\"\n  [object3dController]=\"object3dController\"\n  [material]=\"material?.material\"\n>\n  <ngt-cylinder-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-cylinder-geometry>\n  <ng-template #withoutArgs>\n    <ngt-cylinder-geometry></ngt-cylinder-geometry>\n  </ng-template>\n</ngt-mesh>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "args",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "ConstructorParameters<>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "animateReady",
                    "defaultValue": "new EventEmitter<NgtAnimationReady<TEntity>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                },
                {
                    "name": "ready",
                    "defaultValue": "new EventEmitter<TEntity>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 6,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "object3dController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtObject3dController",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_OBJECT_3D_WATCHED_CONTROLLER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "material",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtMaterial",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "NgtMaterial"
                        }
                    ],
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtCylinderGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-cylinder',\n  exportAs: 'ngtSobaCylinder',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-cylinder-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-cylinder-geometry>\n      <ng-template #withoutArgs>\n        <ngt-cylinder-geometry></ngt-cylinder-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaCylinder extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.CylinderGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaCylinder],\n  exports: [NgtSobaCylinder],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtCylinderGeometryModule],\n})\nexport class NgtSobaCylinderModule {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NgtSobaExtender"
        },
        {
            "name": "NgtSobaDodecahedron",
            "id": "component-NgtSobaDodecahedron-91f6d0545cc8ebf74af1212673510ef1c6f884f0eac469918cc584083955298d287560d43027ad81b0ec8610eff54a5982ddc5d768ac3ccc12097d468fa26cf9",
            "file": "packages/soba/shapes/src/lib/dodecahedron/dodecahedron.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "ngtSobaDodecahedron",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NGT_OBJECT_3D_CONTROLLER_PROVIDER",
                    "type": "controller"
                }
            ],
            "selector": "ngt-soba-dodecahedron",
            "styleUrls": [],
            "styles": [],
            "template": "<ngt-mesh\n  (ready)=\"ready.emit($event)\"\n  (animateReady)=\"animateReady.emit($event)\"\n  [object3dController]=\"object3dController\"\n  [material]=\"material?.material\"\n>\n  <ngt-dodecahedron-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-dodecahedron-geometry>\n  <ng-template #withoutArgs>\n    <ngt-dodecahedron-geometry></ngt-dodecahedron-geometry>\n  </ng-template>\n</ngt-mesh>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "args",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "ConstructorParameters<>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "animateReady",
                    "defaultValue": "new EventEmitter<NgtAnimationReady<TEntity>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                },
                {
                    "name": "ready",
                    "defaultValue": "new EventEmitter<TEntity>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 6,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "object3dController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtObject3dController",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_OBJECT_3D_WATCHED_CONTROLLER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "material",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtMaterial",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "NgtMaterial"
                        }
                    ],
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtDodecahedronGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-dodecahedron',\n  exportAs: 'ngtSobaDodecahedron',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-dodecahedron-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-dodecahedron-geometry>\n      <ng-template #withoutArgs>\n        <ngt-dodecahedron-geometry></ngt-dodecahedron-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaDodecahedron extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.DodecahedronGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaDodecahedron],\n  exports: [NgtSobaDodecahedron],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtDodecahedronGeometryModule],\n})\nexport class NgtSobaDodecahedronModule {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NgtSobaExtender"
        },
        {
            "name": "NgtSobaExtrude",
            "id": "component-NgtSobaExtrude-bc778c80b3a90aa41cc6124fd06df00243bff41ef66318689a92743b3c9df67743acbb90fbb053242a7dacc2d275142093f2c8cab14e78db3b321ea4f2346467",
            "file": "packages/soba/shapes/src/lib/extrude/extrude.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "ngtSobaExtrude",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NGT_OBJECT_3D_CONTROLLER_PROVIDER",
                    "type": "controller"
                }
            ],
            "selector": "ngt-soba-extrude",
            "styleUrls": [],
            "styles": [],
            "template": "<ngt-mesh\n  (ready)=\"ready.emit($event)\"\n  (animateReady)=\"animateReady.emit($event)\"\n  [object3dController]=\"object3dController\"\n  [material]=\"material?.material\"\n>\n  <ngt-extrude-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-extrude-geometry>\n  <ng-template #withoutArgs>\n    <ngt-extrude-geometry></ngt-extrude-geometry>\n  </ng-template>\n</ngt-mesh>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "args",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "ConstructorParameters<>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "animateReady",
                    "defaultValue": "new EventEmitter<NgtAnimationReady<TEntity>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                },
                {
                    "name": "ready",
                    "defaultValue": "new EventEmitter<TEntity>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 6,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "object3dController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtObject3dController",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_OBJECT_3D_WATCHED_CONTROLLER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "material",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtMaterial",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "NgtMaterial"
                        }
                    ],
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtExtrudeGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-extrude',\n  exportAs: 'ngtSobaExtrude',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-extrude-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-extrude-geometry>\n      <ng-template #withoutArgs>\n        <ngt-extrude-geometry></ngt-extrude-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaExtrude extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.ExtrudeGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaExtrude],\n  exports: [NgtSobaExtrude],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtExtrudeGeometryModule],\n})\nexport class NgtSobaExtrudeModule {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NgtSobaExtender"
        },
        {
            "name": "NgtSobaIcosahedron",
            "id": "component-NgtSobaIcosahedron-f8031201daef05ff56bd4ee79e09795c4f8f3446ee8ab83174e6968063ad28ebe213b570736e2047ef2230ab86d6c48b9a74142a8c1ec36c06e1c72e1be0b1b1",
            "file": "packages/soba/shapes/src/lib/icosahedron/icosahedron.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "ngtSobaIcosahedron",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NGT_OBJECT_3D_CONTROLLER_PROVIDER",
                    "type": "controller"
                }
            ],
            "selector": "ngt-soba-icosahedron",
            "styleUrls": [],
            "styles": [],
            "template": "<ngt-mesh\n  (ready)=\"ready.emit($event)\"\n  (animateReady)=\"animateReady.emit($event)\"\n  [object3dController]=\"object3dController\"\n  [material]=\"material?.material\"\n>\n  <ngt-icosahedron-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-icosahedron-geometry>\n  <ng-template #withoutArgs>\n    <ngt-icosahedron-geometry></ngt-icosahedron-geometry>\n  </ng-template>\n</ngt-mesh>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "args",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "ConstructorParameters<>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "animateReady",
                    "defaultValue": "new EventEmitter<NgtAnimationReady<TEntity>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                },
                {
                    "name": "ready",
                    "defaultValue": "new EventEmitter<TEntity>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 6,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "object3dController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtObject3dController",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_OBJECT_3D_WATCHED_CONTROLLER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "material",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtMaterial",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "NgtMaterial"
                        }
                    ],
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtIcosahedronGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-icosahedron',\n  exportAs: 'ngtSobaIcosahedron',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-icosahedron-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-icosahedron-geometry>\n      <ng-template #withoutArgs>\n        <ngt-icosahedron-geometry></ngt-icosahedron-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaIcosahedron extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.IcosahedronGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaIcosahedron],\n  exports: [NgtSobaIcosahedron],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtIcosahedronGeometryModule],\n})\nexport class NgtSobaIcosahedronModule {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NgtSobaExtender"
        },
        {
            "name": "NgtSobaImage",
            "id": "component-NgtSobaImage-99b9c410f595f9c7786afa8e0e1dd91a9c82d742fb3dc58e9a98dafb6eb985ca6f5e0039c4efa4277f45333f4aa076e1b4f34a6647942c256daa0d962c15621c",
            "file": "packages/soba/abstractions/src/lib/image/image.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "ngtSobaImage",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NGT_OBJECT_3D_CONTROLLER_PROVIDER",
                    "type": "controller"
                }
            ],
            "selector": "ngt-soba-image[url]",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"texture$ | async as texture\">\n  <ngt-mesh\n    [scale]=\"scale\"\n    [object3dController]=\"object3dController\"\n    (ready)=\"ready.emit($event)\"\n    (animateReady)=\"animateReady.emit($event)\"\n  >\n    <ngt-plane-geometry\n      [args]=\"[1, 1, segments, segments]\"\n    ></ngt-plane-geometry>\n    <ngt-soba-image-shader-material\n      [parameters]=\"{color, map: texture, zoom, grayscale, scale: planeBounds, imageBounds}\"\n    ></ngt-soba-image-shader-material>\n    <ng-content></ng-content>\n  </ngt-mesh>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "NgtColor",
                    "decorators": []
                },
                {
                    "name": "grayscale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "scale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "segments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "zoom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "animateReady",
                    "defaultValue": "new EventEmitter<NgtAnimationReady<TEntity>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                },
                {
                    "name": "ready",
                    "defaultValue": "new EventEmitter<TEntity>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 6,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "imageBounds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number]",
                    "optional": true,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "object3dController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtObject3dController",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_OBJECT_3D_WATCHED_CONTROLLER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "planeBounds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number]",
                    "optional": true,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "texture$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<THREE.Texture>",
                    "optional": true,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "material",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtMaterial",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "NgtMaterial"
                        }
                    ],
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtColor,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtPlaneGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { TextureLoaderService } from '@angular-three/soba/loaders';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport { Observable, tap } from 'rxjs';\nimport * as THREE from 'three';\nimport { NgtSobaImageShaderMaterial } from './image-shader-material.directive';\n\n@Component({\n  selector: 'ngt-soba-image[url]',\n  exportAs: 'ngtSobaImage',\n  template: `\n    <ng-container *ngIf=\"texture$ | async as texture\">\n      <ngt-mesh\n        [scale]=\"scale\"\n        [object3dController]=\"object3dController\"\n        (ready)=\"ready.emit($event)\"\n        (animateReady)=\"animateReady.emit($event)\"\n      >\n        <ngt-plane-geometry\n          [args]=\"[1, 1, segments, segments]\"\n        ></ngt-plane-geometry>\n        <ngt-soba-image-shader-material\n          [parameters]=\"{color, map: texture, zoom, grayscale, scale: planeBounds, imageBounds}\"\n        ></ngt-soba-image-shader-material>\n        <ng-content></ng-content>\n      </ngt-mesh>\n    </ng-container>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaImage\n  extends NgtSobaExtender<THREE.Mesh>\n  implements OnChanges\n{\n  @Input() segments?: number;\n  @Input() scale?: number;\n  @Input() color?: NgtColor;\n  @Input() zoom?: number;\n  @Input() grayscale?: number;\n\n  @Input() set url(v: string) {\n    this.texture$ = this.textureLoaderService.load(v).pipe(\n      tap((texture) => {\n        this.imageBounds = [texture.image.width, texture.image.height];\n      })\n    );\n  }\n\n  planeBounds?: [number, number];\n  imageBounds?: [number, number];\n\n  texture$?: Observable<THREE.Texture>;\n\n  constructor(\n    private textureLoaderService: TextureLoaderService,\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.planeBounds = Array.isArray(this.scale)\n      ? [this.scale[0], this.scale[1]]\n      : [this.scale, this.scale];\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaImage, NgtSobaImageShaderMaterial],\n  exports: [NgtSobaImage, NgtSobaImageShaderMaterial],\n  imports: [NgtCoreModule, NgtMeshModule, NgtPlaneGeometryModule, CommonModule],\n})\nexport class NgtImageModule {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "textureLoaderService",
                        "type": "TextureLoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 71,
                "jsdoctags": [
                    {
                        "name": "textureLoaderService",
                        "type": "TextureLoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NgtSobaExtender",
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "url": {
                    "name": "url",
                    "setSignature": {
                        "name": "url",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 60,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "NgtSobaLathe",
            "id": "component-NgtSobaLathe-a13ece4503c5b4cb15c03f7ac48c4692282f6e8f8b4ef0f059176e9da1c7594d49770df43b59be4828bebad756651518f48d8fcf2e6c8903bad1bfbde082f029",
            "file": "packages/soba/shapes/src/lib/lathe/lathe.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "ngtSobaLathe",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NGT_OBJECT_3D_CONTROLLER_PROVIDER",
                    "type": "controller"
                }
            ],
            "selector": "ngt-soba-lathe",
            "styleUrls": [],
            "styles": [],
            "template": "<ngt-mesh\n  (ready)=\"ready.emit($event)\"\n  (animateReady)=\"animateReady.emit($event)\"\n  [object3dController]=\"object3dController\"\n  [material]=\"material?.material\"\n>\n  <ngt-lathe-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-lathe-geometry>\n  <ng-template #withoutArgs>\n    <ngt-lathe-geometry></ngt-lathe-geometry>\n  </ng-template>\n</ngt-mesh>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "args",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "ConstructorParameters<>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "animateReady",
                    "defaultValue": "new EventEmitter<NgtAnimationReady<TEntity>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                },
                {
                    "name": "ready",
                    "defaultValue": "new EventEmitter<TEntity>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 6,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "object3dController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtObject3dController",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_OBJECT_3D_WATCHED_CONTROLLER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "material",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtMaterial",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "NgtMaterial"
                        }
                    ],
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtLatheGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-lathe',\n  exportAs: 'ngtSobaLathe',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-lathe-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-lathe-geometry>\n      <ng-template #withoutArgs>\n        <ngt-lathe-geometry></ngt-lathe-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaLathe extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.LatheGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaLathe],\n  exports: [NgtSobaLathe],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtLatheGeometryModule],\n})\nexport class NgtSobaLatheModule {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NgtSobaExtender"
        },
        {
            "name": "NgtSobaLine",
            "id": "component-NgtSobaLine-51994c7ec4d43131e086c0ea5771f2fd3c4a4f39c428d7786f67dd47bff001ea6098cb5637795a7c02610f7b992f3bd42e838ebbab0c76d69b2302ee8721c162",
            "file": "packages/soba/abstractions/src/lib/line/line.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "ngtSobaLine",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NGT_SOBA_LINE_CONTROLLER_PROVIDER",
                    "type": "controller"
                }
            ],
            "selector": "ngt-soba-line[points]",
            "styleUrls": [],
            "styles": [],
            "template": "<ngt-line2\n  (ready)=\"sobaLineController.onLineReady($event)\"\n  (animateReady)=\"sobaLineController.animateReady.emit($event)\"\n  [object3dController]=\"object3dController\"\n>\n  <ngt-line-geometry (ready)=\"onGeometryReady($event)\"></ngt-line-geometry>\n  <ngt-line-material\n    (ready)=\"sobaLineController.onMaterialReady($event)\"\n    [parameters]=\"sobaLineController.parameters\"\n  ></ngt-line-material>\n</ngt-line2>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "points",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "Array<NgtVector3>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "object3dController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtObject3dController",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_OBJECT_3D_WATCHED_CONTROLLER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "pointsChange$",
                    "defaultValue": "new ReplaySubject<SimpleChanges>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "resolution",
                    "defaultValue": "new THREE.Vector2(512, 512)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "sobaLineController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtSobaLineController",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_SOBA_LINE_WATCHED_CONTROLLER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onGeometryReady",
                    "args": [
                        {
                            "name": "geometry",
                            "type": "LineGeometry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "geometry",
                            "type": "LineGeometry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupGeometry",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  DestroyedService,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n  NgtVector3,\n} from '@angular-three/core';\nimport { NgtLineGeometryModule } from '@angular-three/core/geometries';\nimport { NgtLineMaterialModule } from '@angular-three/core/materials';\nimport { NgtLine2Module } from '@angular-three/core/meshes';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n  NgZone,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n} from '@angular/core';\nimport { merge, ReplaySubject, takeUntil } from 'rxjs';\nimport * as THREE from 'three';\nimport { LineGeometry } from 'three/examples/jsm/lines/LineGeometry';\nimport {\n  NGT_SOBA_LINE_CONTROLLER_PROVIDER,\n  NGT_SOBA_LINE_WATCHED_CONTROLLER,\n} from './line-watched-controller.di';\nimport { NgtSobaLineController } from './line.controller';\n\n@Component({\n  selector: 'ngt-soba-line[points]',\n  exportAs: 'ngtSobaLine',\n  template: `\n    <ngt-line2\n      (ready)=\"sobaLineController.onLineReady($event)\"\n      (animateReady)=\"sobaLineController.animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n    >\n      <ngt-line-geometry (ready)=\"onGeometryReady($event)\"></ngt-line-geometry>\n      <ngt-line-material\n        (ready)=\"sobaLineController.onMaterialReady($event)\"\n        [parameters]=\"sobaLineController.parameters\"\n      ></ngt-line-material>\n    </ngt-line2>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_SOBA_LINE_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaLine implements OnChanges, OnInit {\n  @Input() points!: Array<NgtVector3>;\n\n  resolution = new THREE.Vector2(512, 512);\n\n  private pointsChange$ = new ReplaySubject<SimpleChanges>(1);\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController,\n    @Inject(NGT_SOBA_LINE_WATCHED_CONTROLLER)\n    public sobaLineController: NgtSobaLineController,\n    private ngZone: NgZone,\n    private destroyed: DestroyedService\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.ngZone.runOutsideAngular(() => {\n      this.sobaLineController.mergeParameters({ resolution: this.resolution });\n\n      if (changes.points) {\n        this.pointsChange$.next(changes);\n      }\n    });\n  }\n\n  ngOnInit() {\n    merge(this.pointsChange$, this.sobaLineController.change$)\n      .pipe(takeUntil(this.destroyed))\n      .subscribe((changes) => {\n        if (changes.point || changes.vertexColors) {\n          if (this.sobaLineController.geometry) {\n            this.setupGeometry();\n          }\n        }\n      });\n  }\n\n  onGeometryReady(geometry: LineGeometry) {\n    this.ngZone.runOutsideAngular(() => {\n      this.sobaLineController.geometry = geometry;\n      this.setupGeometry();\n    });\n  }\n\n  private setupGeometry() {\n    const pointValues = this.points.map((p) =>\n      p instanceof THREE.Vector3 ? p.toArray() : p\n    );\n    this.sobaLineController.geometry.setPositions((pointValues as any).flat());\n\n    if (this.sobaLineController.vertexColors) {\n      const colorValues = this.sobaLineController.vertexColors.map((c) =>\n        c instanceof THREE.Color ? c.toArray() : c\n      );\n      this.sobaLineController.geometry.setColors((colorValues as any).flat());\n    }\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaLine, NgtSobaLineController],\n  exports: [NgtSobaLine, NgtSobaLineController],\n  imports: [\n    NgtCoreModule,\n    NgtLine2Module,\n    NgtLineGeometryModule,\n    NgtLineMaterialModule,\n  ],\n})\nexport class NgtSobaLineModule {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sobaLineController",
                        "type": "NgtSobaLineController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "destroyed",
                        "type": "DestroyedService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sobaLineController",
                        "type": "NgtSobaLineController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "destroyed",
                        "type": "DestroyedService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges",
                "OnInit"
            ]
        },
        {
            "name": "NgtSobaOctahedron",
            "id": "component-NgtSobaOctahedron-71f8b3bc36e5ae6fd23f562f933c386d7a550222fab233bb43223f8971308bb1648178cd84bbe8719a67e7908dfa46cc544c768a60c2131d4f54793bfb74affd",
            "file": "packages/soba/shapes/src/lib/octahedron/octahedron.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "ngtSobaOctahedron",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NGT_OBJECT_3D_CONTROLLER_PROVIDER",
                    "type": "controller"
                }
            ],
            "selector": "ngt-soba-octahedron",
            "styleUrls": [],
            "styles": [],
            "template": "<ngt-mesh\n  (ready)=\"ready.emit($event)\"\n  (animateReady)=\"animateReady.emit($event)\"\n  [object3dController]=\"object3dController\"\n  [material]=\"material?.material\"\n>\n  <ngt-octahedron-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-octahedron-geometry>\n  <ng-template #withoutArgs>\n    <ngt-octahedron-geometry></ngt-octahedron-geometry>\n  </ng-template>\n</ngt-mesh>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "args",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "ConstructorParameters<>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "animateReady",
                    "defaultValue": "new EventEmitter<NgtAnimationReady<TEntity>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                },
                {
                    "name": "ready",
                    "defaultValue": "new EventEmitter<TEntity>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 6,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "object3dController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtObject3dController",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_OBJECT_3D_WATCHED_CONTROLLER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "material",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtMaterial",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "NgtMaterial"
                        }
                    ],
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtOctahedronGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-octahedron',\n  exportAs: 'ngtSobaOctahedron',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-octahedron-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-octahedron-geometry>\n      <ng-template #withoutArgs>\n        <ngt-octahedron-geometry></ngt-octahedron-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaOctahedron extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.OctahedronGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaOctahedron],\n  exports: [NgtSobaOctahedron],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtOctahedronGeometryModule],\n})\nexport class NgtSobaOctahedronModule {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NgtSobaExtender"
        },
        {
            "name": "NgtSobaOrthographicCamera",
            "id": "component-NgtSobaOrthographicCamera-79b5f3028aa4a6b50f57f953e875d1308f90abfa315155484a35610211194d76d35267ce93d9dfcb22b4caf8bbd9d3303686a643b9d86fb0b755ca64fa7387e8",
            "file": "packages/soba/cameras/src/lib/orthographic-camera/orthographic-camera.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "ngtSobaOrthographicCamera",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NGT_OBJECT_3D_CONTROLLER_PROVIDER",
                    "type": "controller"
                },
                {
                    "name": "SobaOrthographicCameraStore"
                }
            ],
            "selector": "ngt-soba-orthographic-camera",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"vm$ | async as vm\">\n  <ngt-orthographic-camera\n    [args]=\"[vm.left, vm.right, vm.top, vm.bottom, vm.near, vm.far]\"\n    [object3dController]=\"vm.object3dController\"\n  >\n    <ng-content></ng-content>\n  </ngt-orthographic-camera>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "far",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "makeDefault",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "manual",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "near",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "vm$",
                    "defaultValue": "this.sobaOrthographicCameraStore.vm$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NgtCoreModule,\n} from '@angular-three/core';\nimport { NgtOrthographicCameraModule } from '@angular-three/core/cameras';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  NgModule,\n  OnInit,\n} from '@angular/core';\nimport { SobaOrthographicCameraStore } from './orthographic-camera.store';\n\n@Component({\n  selector: 'ngt-soba-orthographic-camera',\n  exportAs: 'ngtSobaOrthographicCamera',\n  template: `\n    <ng-container *ngIf=\"vm$ | async as vm\">\n      <ngt-orthographic-camera\n        [args]=\"[vm.left, vm.right, vm.top, vm.bottom, vm.near, vm.far]\"\n        [object3dController]=\"vm.object3dController\"\n      >\n        <ng-content></ng-content>\n      </ngt-orthographic-camera>\n    </ng-container>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER, SobaOrthographicCameraStore],\n})\nexport class NgtSobaOrthographicCamera implements OnInit {\n  @Input() set makeDefault(v: boolean) {\n    this.sobaOrthographicCameraStore.updaters.setMakeDefault(v);\n  }\n\n  @Input() set manual(v: boolean) {\n    this.sobaOrthographicCameraStore.updaters.setManual(v);\n  }\n\n  @Input() set near(v: number) {\n    this.sobaOrthographicCameraStore.updaters.setNear(v);\n  }\n\n  @Input() set far(v: number) {\n    this.sobaOrthographicCameraStore.updaters.setFar(v);\n  }\n\n  readonly vm$ = this.sobaOrthographicCameraStore.vm$;\n\n  constructor(\n    private sobaOrthographicCameraStore: SobaOrthographicCameraStore\n  ) {}\n\n  ngOnInit() {\n    this.sobaOrthographicCameraStore.initEffect();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaOrthographicCamera],\n  exports: [NgtSobaOrthographicCamera],\n  imports: [NgtOrthographicCameraModule, NgtCoreModule, CommonModule],\n})\nexport class NgtSobaOrthographicCameraModule {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sobaOrthographicCameraStore",
                        "type": "SobaOrthographicCameraStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "sobaOrthographicCameraStore",
                        "type": "SobaOrthographicCameraStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "makeDefault": {
                    "name": "makeDefault",
                    "setSignature": {
                        "name": "makeDefault",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 33,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "manual": {
                    "name": "manual",
                    "setSignature": {
                        "name": "manual",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 37,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "near": {
                    "name": "near",
                    "setSignature": {
                        "name": "near",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 41,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "far": {
                    "name": "far",
                    "setSignature": {
                        "name": "far",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 45,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "NgtSobaParametric",
            "id": "component-NgtSobaParametric-29e58a8f18c9b92a4141c64e22c7c7afa666b01d8172c8710d2fb8a1b22e9406dee3b0c033805672c1ec2d65550d6a4fba1d72361d0d3fdd8a88b6f22ed70930",
            "file": "packages/soba/shapes/src/lib/parametric/parametric.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "ngtSobaParametric",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NGT_OBJECT_3D_CONTROLLER_PROVIDER",
                    "type": "controller"
                }
            ],
            "selector": "ngt-soba-parametric",
            "styleUrls": [],
            "styles": [],
            "template": "<ngt-mesh\n  (ready)=\"ready.emit($event)\"\n  (animateReady)=\"animateReady.emit($event)\"\n  [object3dController]=\"object3dController\"\n  [material]=\"material?.material\"\n>\n  <ngt-parametric-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-parametric-geometry>\n  <ng-template #withoutArgs>\n    <ngt-parametric-geometry></ngt-parametric-geometry>\n  </ng-template>\n</ngt-mesh>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "args",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "ConstructorParameters<>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "animateReady",
                    "defaultValue": "new EventEmitter<NgtAnimationReady<TEntity>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                },
                {
                    "name": "ready",
                    "defaultValue": "new EventEmitter<TEntity>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 6,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "object3dController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtObject3dController",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_OBJECT_3D_WATCHED_CONTROLLER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "material",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtMaterial",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "NgtMaterial"
                        }
                    ],
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtParametricGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport { ParametricGeometry } from 'three/examples/jsm/geometries/ParametricGeometry';\n\n@Component({\n  selector: 'ngt-soba-parametric',\n  exportAs: 'ngtSobaParametric',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-parametric-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-parametric-geometry>\n      <ng-template #withoutArgs>\n        <ngt-parametric-geometry></ngt-parametric-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaParametric extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof ParametricGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaParametric],\n  exports: [NgtSobaParametric],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtParametricGeometryModule],\n})\nexport class NgtSobaParametricModule {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NgtSobaExtender"
        },
        {
            "name": "NgtSobaPlane",
            "id": "component-NgtSobaPlane-e3bf9b5349c87933dc528a68eb5593acfc3b70eec714786b23b702ffbd6cf22ad51c6a202862479e4d6bd83d93485086c268b7c5f2c51f4bef960ead56f1a053",
            "file": "packages/soba/shapes/src/lib/plane/plane.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "ngtSobaPlane",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NGT_OBJECT_3D_CONTROLLER_PROVIDER",
                    "type": "controller"
                }
            ],
            "selector": "ngt-soba-plane",
            "styleUrls": [],
            "styles": [],
            "template": "<ngt-mesh\n  (ready)=\"ready.emit($event)\"\n  (animateReady)=\"animateReady.emit($event)\"\n  [object3dController]=\"object3dController\"\n  [material]=\"material?.material\"\n>\n  <ngt-plane-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-plane-geometry>\n  <ng-template #withoutArgs>\n    <ngt-plane-geometry></ngt-plane-geometry>\n  </ng-template>\n</ngt-mesh>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "args",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "ConstructorParameters<>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "animateReady",
                    "defaultValue": "new EventEmitter<NgtAnimationReady<TEntity>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                },
                {
                    "name": "ready",
                    "defaultValue": "new EventEmitter<TEntity>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 6,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "object3dController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtObject3dController",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_OBJECT_3D_WATCHED_CONTROLLER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "material",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtMaterial",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "NgtMaterial"
                        }
                    ],
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtPlaneGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-plane',\n  exportAs: 'ngtSobaPlane',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-plane-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-plane-geometry>\n      <ng-template #withoutArgs>\n        <ngt-plane-geometry></ngt-plane-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaPlane extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.PlaneGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaPlane],\n  exports: [NgtSobaPlane],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtPlaneGeometryModule],\n})\nexport class NgtSobaPlaneModule {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NgtSobaExtender"
        },
        {
            "name": "NgtSobaPolyhedron",
            "id": "component-NgtSobaPolyhedron-ecef1212f26ef16fbee3690a796f2da3606dde51591f73db374880433c8619857b9aebc93be1a0df72f78c9d700078abb42276e8adb4a1c8d79579144530b7dc",
            "file": "packages/soba/shapes/src/lib/polyhedron/polyhedron.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "ngtSobaPolyhedron",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NGT_OBJECT_3D_CONTROLLER_PROVIDER",
                    "type": "controller"
                }
            ],
            "selector": "ngt-soba-polyhedron",
            "styleUrls": [],
            "styles": [],
            "template": "<ngt-mesh\n  (ready)=\"ready.emit($event)\"\n  (animateReady)=\"animateReady.emit($event)\"\n  [object3dController]=\"object3dController\"\n  [material]=\"material?.material\"\n>\n  <ngt-polyhedron-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-polyhedron-geometry>\n  <ng-template #withoutArgs>\n    <ngt-polyhedron-geometry></ngt-polyhedron-geometry>\n  </ng-template>\n</ngt-mesh>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "args",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "ConstructorParameters<>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "animateReady",
                    "defaultValue": "new EventEmitter<NgtAnimationReady<TEntity>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                },
                {
                    "name": "ready",
                    "defaultValue": "new EventEmitter<TEntity>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 6,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "object3dController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtObject3dController",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_OBJECT_3D_WATCHED_CONTROLLER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "material",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtMaterial",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "NgtMaterial"
                        }
                    ],
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtPolyhedronGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-polyhedron',\n  exportAs: 'ngtSobaPolyhedron',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-polyhedron-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-polyhedron-geometry>\n      <ng-template #withoutArgs>\n        <ngt-polyhedron-geometry></ngt-polyhedron-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaPolyhedron extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.PolyhedronGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaPolyhedron],\n  exports: [NgtSobaPolyhedron],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtPolyhedronGeometryModule],\n})\nexport class NgtSobaPolyhedronModule {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NgtSobaExtender"
        },
        {
            "name": "NgtSobaPositionalAudio",
            "id": "component-NgtSobaPositionalAudio-95331cfeac5913015aa179c1b43820e329bf8d1d43450cb17e74661d9a3bce031b0db1ef966d92b293be7a2e6e1959bf27d1c620fa3f7112f76ca7c29d28489c",
            "file": "packages/soba/abstractions/src/lib/positional-audio/positional-audio.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "ngtSobaPositionalAudio",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NGT_AUDIO_CONTROLLER_PROVIDER",
                    "type": "controller"
                },
                {
                    "name": "SobaPositionalAudioStore"
                }
            ],
            "selector": "ngt-soba-positional-audio[url]",
            "styleUrls": [],
            "styles": [],
            "template": "<ngt-positional-audio\n  *ngIf=\"listener$ | async as listener\"\n  (ready)=\"onAudioReady($event)\"\n  (animateReady)=\"animateReady.emit($event)\"\n  [listener]=\"listener\"\n  [object3dController]=\"object3dController\"\n  [audioController]=\"audioController\"\n>\n  <ng-content></ng-content>\n</ngt-positional-audio>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "distance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "loop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "animateReady",
                    "defaultValue": "new EventEmitter<NgtAnimationReady<TEntity>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                },
                {
                    "name": "ready",
                    "defaultValue": "new EventEmitter<TEntity>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 6,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "audioController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtAudioController",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_AUDIO_WATCHED_CONTROLLER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "listener$",
                    "defaultValue": "this.sobaPositionalAudioStore.selectors.listener$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "object3dController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtObject3dController",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_OBJECT_3D_WATCHED_CONTROLLER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "material",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtMaterial",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "NgtMaterial"
                        }
                    ],
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAudioReady",
                    "args": [
                        {
                            "name": "audio",
                            "type": "THREE.PositionalAudio",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "audio",
                            "type": "THREE.PositionalAudio",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  NGT_AUDIO_CONTROLLER_PROVIDER,\n  NGT_AUDIO_WATCHED_CONTROLLER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtAudioController,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtPositionalAudioModule } from '@angular-three/core/audios';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n  NgZone,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport * as THREE from 'three';\nimport { SobaPositionalAudioStore } from './positional-audio.store';\n\n@Component({\n  selector: 'ngt-soba-positional-audio[url]',\n  exportAs: 'ngtSobaPositionalAudio',\n  template: `\n    <ngt-positional-audio\n      *ngIf=\"listener$ | async as listener\"\n      (ready)=\"onAudioReady($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [listener]=\"listener\"\n      [object3dController]=\"object3dController\"\n      [audioController]=\"audioController\"\n    >\n      <ng-content></ng-content>\n    </ngt-positional-audio>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_AUDIO_CONTROLLER_PROVIDER, SobaPositionalAudioStore],\n})\nexport class NgtSobaPositionalAudio\n  extends NgtSobaExtender<THREE.PositionalAudio>\n  implements OnInit, OnDestroy\n{\n  @Input() set url(v: string) {\n    this.sobaPositionalAudioStore.updaters.setUrl(v);\n  }\n\n  @Input() set distance(v: number) {\n    this.sobaPositionalAudioStore.updaters.setDistance(v);\n  }\n\n  @Input() set loop(v: boolean) {\n    this.sobaPositionalAudioStore.updaters.setLoop(v);\n  }\n\n  readonly listener$ = this.sobaPositionalAudioStore.selectors.listener$;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController,\n    @Inject(NGT_AUDIO_WATCHED_CONTROLLER)\n    public audioController: NgtAudioController,\n    private ngZone: NgZone,\n    private sobaPositionalAudioStore: SobaPositionalAudioStore\n  ) {\n    super();\n  }\n\n  ngOnInit() {\n    this.sobaPositionalAudioStore.initEffect(\n      this.audioController.autoplay || false\n    );\n  }\n\n  ngOnDestroy() {\n    this.sobaPositionalAudioStore.destroyEffect();\n  }\n\n  onAudioReady(audio: THREE.PositionalAudio) {\n    this.ngZone.runOutsideAngular(() => {\n      this.sobaPositionalAudioStore.updaters.setSound(audio);\n      this.ready.emit(audio);\n    });\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaPositionalAudio],\n  exports: [NgtSobaPositionalAudio],\n  imports: [CommonModule, NgtCoreModule, NgtPositionalAudioModule],\n})\nexport class NgtSobaPositionalAudioModule {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "audioController",
                        "type": "NgtAudioController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sobaPositionalAudioStore",
                        "type": "SobaPositionalAudioStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 59,
                "jsdoctags": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "audioController",
                        "type": "NgtAudioController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sobaPositionalAudioStore",
                        "type": "SobaPositionalAudioStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NgtSobaExtender",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "url": {
                    "name": "url",
                    "setSignature": {
                        "name": "url",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 47,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "distance": {
                    "name": "distance",
                    "setSignature": {
                        "name": "distance",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 51,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "loop": {
                    "name": "loop",
                    "setSignature": {
                        "name": "loop",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 55,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "NgtSobaQuadraticBezierLine",
            "id": "component-NgtSobaQuadraticBezierLine-45ec264c0a755769d1d787acd4bacfe000609aadd413d9749c90d47e5f2076c465586e08bc82aeda2b62a8b108cb2904dfd30544bb1f7a690d6c70ba847208e8",
            "file": "packages/soba/abstractions/src/lib/quadratic-bezier-line/quadratic-bezier-line.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "ngtSobaQuadraticBezierLine",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NGT_SOBA_LINE_CONTROLLER_PROVIDER",
                    "type": "controller"
                }
            ],
            "selector": "ngt-soba-quadratic-bezier-line[start][end]",
            "styleUrls": [],
            "styles": [],
            "template": "<ngt-soba-line\n  [points]=\"points\"\n  [object3dController]=\"object3dController\"\n  [sobaLineController]=\"sobaLineController\"\n></ngt-soba-line>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "end",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "NgtVector3",
                    "decorators": []
                },
                {
                    "name": "mid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "NgtVector3",
                    "decorators": []
                },
                {
                    "name": "segments",
                    "defaultValue": "20",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "start",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "NgtVector3",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "object3dController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtObject3dController",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_OBJECT_3D_WATCHED_CONTROLLER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "points",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<NgtVector3>",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "sobaLineController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtSobaLineController",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_SOBA_LINE_CONTROLLER_PROVIDER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "buildPoints",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n  NgtVector3,\n} from '@angular-three/core';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n  NgZone,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n} from '@angular/core';\nimport * as THREE from 'three';\nimport { NGT_SOBA_LINE_CONTROLLER_PROVIDER } from '../line/line-watched-controller.di';\nimport { NgtSobaLineModule } from '../line/line.component';\nimport { NgtSobaLineController } from '../line/line.controller';\n\n@Component({\n  selector: 'ngt-soba-quadratic-bezier-line[start][end]',\n  exportAs: 'ngtSobaQuadraticBezierLine',\n  template: `\n    <ngt-soba-line\n      [points]=\"points\"\n      [object3dController]=\"object3dController\"\n      [sobaLineController]=\"sobaLineController\"\n    ></ngt-soba-line>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_SOBA_LINE_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaQuadraticBezierLine implements OnChanges, OnInit {\n  @Input() start!: NgtVector3;\n  @Input() end!: NgtVector3;\n  @Input() mid?: NgtVector3;\n  @Input() segments?: number = 20;\n\n  points!: Array<NgtVector3>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController,\n    @Inject(NGT_SOBA_LINE_CONTROLLER_PROVIDER)\n    public sobaLineController: NgtSobaLineController,\n    private ngZone: NgZone\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.ngZone.runOutsideAngular(() => {\n      if (changes.start || changes.end || changes.mid || changes.segments) {\n        this.buildPoints();\n      }\n    });\n  }\n\n  ngOnInit() {\n    if (!this.points) {\n      this.buildPoints();\n    }\n  }\n\n  private buildPoints() {\n    const startV =\n      this.start instanceof THREE.Vector3\n        ? this.start\n        : new THREE.Vector3(...(this.start as number[]));\n    const endV =\n      this.end instanceof THREE.Vector3\n        ? this.end\n        : new THREE.Vector3(...(this.end as number[]));\n    const mid2 =\n      this.mid ||\n      startV\n        .clone()\n        .add(endV.clone().sub(startV))\n        .add(new THREE.Vector3(0, startV.y - endV.y, 0));\n    const midV =\n      mid2 instanceof THREE.Vector3\n        ? mid2\n        : new THREE.Vector3(...(mid2 as number[]));\n    this.points = new THREE.QuadraticBezierCurve3(startV, midV, endV).getPoints(\n      this.segments\n    );\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaQuadraticBezierLine],\n  exports: [NgtSobaQuadraticBezierLine],\n  imports: [NgtCoreModule, NgtSobaLineModule],\n})\nexport class NgtSobaQuadraticBezierLineModule {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sobaLineController",
                        "type": "NgtSobaLineController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sobaLineController",
                        "type": "NgtSobaLineController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges",
                "OnInit"
            ]
        },
        {
            "name": "NgtSobaRing",
            "id": "component-NgtSobaRing-cd933a68ca4847809453eafe2b78d11e20d76e6021735eaf802190ed02db5302cc07ddd66a523ac7ad388cb8391e941e21de5c617bddc4b257dc44cbeb0edc94",
            "file": "packages/soba/shapes/src/lib/ring/ring.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "ngtSobaRing",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NGT_OBJECT_3D_CONTROLLER_PROVIDER",
                    "type": "controller"
                }
            ],
            "selector": "ngt-soba-ring",
            "styleUrls": [],
            "styles": [],
            "template": "<ngt-mesh\n  (ready)=\"ready.emit($event)\"\n  (animateReady)=\"animateReady.emit($event)\"\n  [object3dController]=\"object3dController\"\n  [material]=\"material?.material\"\n>\n  <ngt-ring-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-ring-geometry>\n  <ng-template #withoutArgs>\n    <ngt-ring-geometry></ngt-ring-geometry>\n  </ng-template>\n</ngt-mesh>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "args",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "ConstructorParameters<>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "animateReady",
                    "defaultValue": "new EventEmitter<NgtAnimationReady<TEntity>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                },
                {
                    "name": "ready",
                    "defaultValue": "new EventEmitter<TEntity>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 6,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "object3dController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtObject3dController",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_OBJECT_3D_WATCHED_CONTROLLER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "material",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtMaterial",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "NgtMaterial"
                        }
                    ],
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtRingGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-ring',\n  exportAs: 'ngtSobaRing',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-ring-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-ring-geometry>\n      <ng-template #withoutArgs>\n        <ngt-ring-geometry></ngt-ring-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaRing extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.RingGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaRing],\n  exports: [NgtSobaRing],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtRingGeometryModule],\n})\nexport class NgtSobaRingModule {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NgtSobaExtender"
        },
        {
            "name": "NgtSobaSphere",
            "id": "component-NgtSobaSphere-fa961813a0182ab5c869079c7906d7cd60d27a48268f1ed7a33fc006f5b29d41bcc8d83eea35ea05add50a62d8cda33621e75097a78af43e561b73a781956e12",
            "file": "packages/soba/shapes/src/lib/sphere/sphere.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "ngtSobaSphere",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NGT_OBJECT_3D_CONTROLLER_PROVIDER",
                    "type": "controller"
                }
            ],
            "selector": "ngt-soba-sphere",
            "styleUrls": [],
            "styles": [],
            "template": "<ngt-mesh\n  (ready)=\"ready.emit($event)\"\n  (animateReady)=\"animateReady.emit($event)\"\n  [object3dController]=\"object3dController\"\n  [material]=\"material?.material\"\n>\n  <ngt-sphere-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-sphere-geometry>\n  <ng-template #withoutArgs>\n    <ngt-sphere-geometry></ngt-sphere-geometry>\n  </ng-template>\n</ngt-mesh>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "args",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "ConstructorParameters<>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "animateReady",
                    "defaultValue": "new EventEmitter<NgtAnimationReady<TEntity>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                },
                {
                    "name": "ready",
                    "defaultValue": "new EventEmitter<TEntity>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 6,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "object3dController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtObject3dController",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_OBJECT_3D_WATCHED_CONTROLLER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "material",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtMaterial",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "NgtMaterial"
                        }
                    ],
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtSphereGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-sphere',\n  exportAs: 'ngtSobaSphere',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-sphere-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-sphere-geometry>\n      <ng-template #withoutArgs>\n        <ngt-sphere-geometry></ngt-sphere-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaSphere extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.SphereGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaSphere],\n  exports: [NgtSobaSphere],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtSphereGeometryModule],\n})\nexport class NgtSobaSphereModule {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NgtSobaExtender"
        },
        {
            "name": "NgtSobaTetrahedron",
            "id": "component-NgtSobaTetrahedron-42f7bbb62afa1513f506d3814a1c26f26d0653529cd635d44fad704e264f3477dab8f0fb1b7dbeb1861a8a13c1c93d961d7c6cdbe49b029265af16da53ef9b44",
            "file": "packages/soba/shapes/src/lib/tetrahedron/tetrahedron.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "ngtSobaTetrahedron",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NGT_OBJECT_3D_CONTROLLER_PROVIDER",
                    "type": "controller"
                }
            ],
            "selector": "ngt-soba-tetrahedron",
            "styleUrls": [],
            "styles": [],
            "template": "<ngt-mesh\n  (ready)=\"ready.emit($event)\"\n  (animateReady)=\"animateReady.emit($event)\"\n  [object3dController]=\"object3dController\"\n  [material]=\"material?.material\"\n>\n  <ngt-tetrahedron-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-tetrahedron-geometry>\n  <ng-template #withoutArgs>\n    <ngt-tetrahedron-geometry></ngt-tetrahedron-geometry>\n  </ng-template>\n</ngt-mesh>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "args",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "ConstructorParameters<>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "animateReady",
                    "defaultValue": "new EventEmitter<NgtAnimationReady<TEntity>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                },
                {
                    "name": "ready",
                    "defaultValue": "new EventEmitter<TEntity>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 6,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "object3dController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtObject3dController",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_OBJECT_3D_WATCHED_CONTROLLER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "material",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtMaterial",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "NgtMaterial"
                        }
                    ],
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtTetrahedronGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-tetrahedron',\n  exportAs: 'ngtSobaTetrahedron',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-tetrahedron-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-tetrahedron-geometry>\n      <ng-template #withoutArgs>\n        <ngt-tetrahedron-geometry></ngt-tetrahedron-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaTetrahedron extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.TetrahedronGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaTetrahedron],\n  exports: [NgtSobaTetrahedron],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtTetrahedronGeometryModule],\n})\nexport class NgtSobaTetrahedronModule {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NgtSobaExtender"
        },
        {
            "name": "NgtSobaText",
            "id": "component-NgtSobaText-67d345b0aa9535898903d034e6c6b7cd616b0e8ba1b6bbdaaabac40e519181be7910d5861a6b47a156ad10df4541fc1f4a0f6e5d38a42d7da4ff093972838db1",
            "file": "packages/soba/abstractions/src/lib/text/text.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "ngtSobaText",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: NgtObject3d, useExisting: NgtSobaText }"
                },
                {
                    "name": "NGT_OBJECT_3D_CONTROLLER_PROVIDER",
                    "type": "controller"
                }
            ],
            "selector": "ngt-soba-text",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"object3d\">\n  <ngt-primitive [object]=\"object3d\" (ready)=\"onTroikaTextReady($event)\">\n    <ng-content></ng-content>\n  </ngt-primitive>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "anchorX",
                    "defaultValue": "'center'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "number | \"left\" | \"center\" | \"right\"",
                    "decorators": []
                },
                {
                    "name": "anchorY",
                    "defaultValue": "'middle'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "number | \"top\" | \"top-baseline\" | \"middle\" | \"bottom-baseline\" | \"bottom\"",
                    "decorators": []
                },
                {
                    "name": "clipRect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "NgtVector4",
                    "decorators": []
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "NgtColor",
                    "decorators": []
                },
                {
                    "name": "debugSDF",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "depthOffset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "direction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "\"auto\" | \"ltr\" | \"rtl\"",
                    "decorators": []
                },
                {
                    "name": "fillOpacity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "font",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "fontSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "letterSpacing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "lineHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "maxWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "outlineBlur",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "number | string",
                    "decorators": []
                },
                {
                    "name": "outlineColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "NgtColor",
                    "decorators": []
                },
                {
                    "name": "outlineOffsetX",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "number | string",
                    "decorators": []
                },
                {
                    "name": "outlineOffsetY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "number | string",
                    "decorators": []
                },
                {
                    "name": "outlineOpacity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "outlineWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "number | string",
                    "decorators": []
                },
                {
                    "name": "overflowWrap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "\"normal\" | \"break-word\"",
                    "decorators": []
                },
                {
                    "name": "strokeColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "NgtColor",
                    "decorators": []
                },
                {
                    "name": "strokeOpacity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "strokeWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "number | string",
                    "decorators": []
                },
                {
                    "name": "textAlign",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "\"left\" | \"right\" | \"center\" | \"justify\"",
                    "decorators": []
                },
                {
                    "name": "whiteSpace",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "\"normal\" | \"overflowWrap\" | \"overflowWrap\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "sync",
                    "defaultValue": "new EventEmitter<TextMeshImpl>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "meshType",
                    "defaultValue": "TextMeshImpl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "textContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtSobaTextContent",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "NgtSobaTextContent, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTroikaTextReady",
                    "args": [
                        {
                            "name": "troikaText",
                            "type": "TextMeshImpl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "troikaText",
                            "type": "TextMeshImpl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  applyProps,\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NgtColor,\n  NgtCommonMesh,\n  NgtCoreModule,\n  NgtObject3d,\n  NgtPrimitiveModule,\n  NgtVector4,\n} from '@angular-three/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  EventEmitter,\n  Input,\n  NgModule,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\n// @ts-ignore\nimport { Text as TextMeshImpl } from 'troika-three-text';\nimport { NgtSobaTextContent } from './text-content.directive';\n\n@Component({\n  selector: 'ngt-soba-text',\n  exportAs: 'ngtSobaText',\n  template: `\n    <ng-container *ngIf=\"object3d\">\n      <ngt-primitive [object]=\"object3d\" (ready)=\"onTroikaTextReady($event)\">\n        <ng-content></ng-content>\n      </ngt-primitive>\n    </ng-container>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    { provide: NgtObject3d, useExisting: NgtSobaText },\n    NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  ],\n})\nexport class NgtSobaText\n  extends NgtCommonMesh<TextMeshImpl>\n  implements OnChanges, OnDestroy, OnInit\n{\n  @Input() color?: NgtColor;\n  @Input() fontSize?: number;\n  @Input() maxWidth?: number;\n  @Input() lineHeight?: number;\n  @Input() letterSpacing?: number;\n  @Input() textAlign?: 'left' | 'right' | 'center' | 'justify';\n  @Input() font?: string;\n  @Input() anchorX: number | 'left' | 'center' | 'right' = 'center';\n  @Input() anchorY:\n    | number\n    | 'top'\n    | 'top-baseline'\n    | 'middle'\n    | 'bottom-baseline'\n    | 'bottom' = 'middle';\n  @Input() clipRect?: NgtVector4;\n  @Input() depthOffset?: number;\n  @Input() direction?: 'auto' | 'ltr' | 'rtl';\n  @Input() overflowWrap?: 'normal' | 'break-word';\n  @Input() whiteSpace?: 'normal' | 'overflowWrap' | 'overflowWrap';\n  @Input() outlineWidth?: number | string;\n  @Input() outlineOffsetX?: number | string;\n  @Input() outlineOffsetY?: number | string;\n  @Input() outlineBlur?: number | string;\n  @Input() outlineColor?: NgtColor;\n  @Input() outlineOpacity?: number;\n  @Input() strokeWidth?: number | string;\n  @Input() strokeColor?: NgtColor;\n  @Input() strokeOpacity?: number;\n  @Input() fillOpacity?: number;\n  @Input() debugSDF?: boolean;\n\n  @Output() sync = new EventEmitter<TextMeshImpl>();\n\n  @ContentChild(NgtSobaTextContent, { static: true })\n  textContent!: NgtSobaTextContent;\n\n  ngOnInit() {\n    if (!this.textContent) {\n      console.warn(\n        '<ngt-text> should have a <ngt-soba-text-content> as a content child.'\n      );\n    }\n  }\n\n  ngOnChanges() {\n    this.ngZone.runOutsideAngular(() => {\n      if (this.object3d && this.textContent) {\n        this.object3d.sync(() => {\n          this.sync.emit(this.object3d);\n        });\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.ngZone.runOutsideAngular(() => {\n      if (this.object3d && this.textContent) {\n        this.object3d.dispose();\n      }\n    });\n  }\n\n  meshType = TextMeshImpl;\n\n  onTroikaTextReady(troikaText: TextMeshImpl) {\n    this.ngZone.runOutsideAngular(() => {\n      if (this.textContent) {\n        troikaText.text = this.textContent.text;\n        applyProps(troikaText, {\n          color: this.color,\n          fontSize: this.fontSize,\n          maxWidth: this.maxWidth,\n          lineHeight: this.lineHeight,\n          letterSpacing: this.letterSpacing,\n          textAlign: this.textAlign,\n          font: this.font,\n          anchorX: this.anchorX,\n          anchorY: this.anchorY,\n          clipRect: this.clipRect,\n          depthOffset: this.depthOffset,\n          direction: this.direction,\n          overflowWrap: this.overflowWrap,\n          whiteSpace: this.whiteSpace,\n          outlineWidth: this.outlineWidth,\n          outlineOffsetX: this.outlineOffsetX,\n          outlineOffsetY: this.outlineOffsetY,\n          outlineBlur: this.outlineBlur,\n          outlineColor: this.outlineColor,\n          outlineOpacity: this.outlineOpacity,\n          strokeWidth: this.strokeWidth,\n          strokeColor: this.strokeColor,\n          strokeOpacity: this.strokeOpacity,\n          fillOpacity: this.fillOpacity,\n          debugSDF: this.debugSDF,\n        });\n      }\n    });\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaText, NgtSobaTextContent],\n  exports: [NgtSobaText, NgtSobaTextContent],\n  imports: [NgtPrimitiveModule, NgtCoreModule, CommonModule],\n})\nexport class NgtSobaTextModule {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": "NgtCommonMesh",
            "implements": [
                "OnChanges",
                "OnDestroy",
                "OnInit"
            ]
        },
        {
            "name": "NgtSobaTorus",
            "id": "component-NgtSobaTorus-627fc80c69e753a9540c5b24af9b45f08bf93107903ba4bae836c7b07675543fc392703487e8e1744c8d54e28f1bbf18fed0f6307c6a76814c22e4fc15ada164",
            "file": "packages/soba/shapes/src/lib/torus/torus.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "ngtSobaTorus",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NGT_OBJECT_3D_CONTROLLER_PROVIDER",
                    "type": "controller"
                }
            ],
            "selector": "ngt-soba-torus",
            "styleUrls": [],
            "styles": [],
            "template": "<ngt-mesh\n  (ready)=\"ready.emit($event)\"\n  (animateReady)=\"animateReady.emit($event)\"\n  [object3dController]=\"object3dController\"\n  [material]=\"material?.material\"\n>\n  <ngt-torus-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-torus-geometry>\n  <ng-template #withoutArgs>\n    <ngt-torus-geometry></ngt-torus-geometry>\n  </ng-template>\n</ngt-mesh>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "args",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "ConstructorParameters<>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "animateReady",
                    "defaultValue": "new EventEmitter<NgtAnimationReady<TEntity>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                },
                {
                    "name": "ready",
                    "defaultValue": "new EventEmitter<TEntity>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 6,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "object3dController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtObject3dController",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_OBJECT_3D_WATCHED_CONTROLLER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "material",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtMaterial",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "NgtMaterial"
                        }
                    ],
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtTorusGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-torus',\n  exportAs: 'ngtSobaTorus',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-torus-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-torus-geometry>\n      <ng-template #withoutArgs>\n        <ngt-torus-geometry></ngt-torus-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaTorus extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.TorusGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaTorus],\n  exports: [NgtSobaTorus],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtTorusGeometryModule],\n})\nexport class NgtSobaTorusModule {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NgtSobaExtender"
        },
        {
            "name": "NgtSobaTorusKnot",
            "id": "component-NgtSobaTorusKnot-af5e28f356223a5caccd71432836104213c51be99e064acba88942b559cc2b8ea95f25fc7ca7580a117a672823fe40b170d14c7eff5038a25267ebcaa1e33887",
            "file": "packages/soba/shapes/src/lib/torus-knot/torus-knot.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "ngtSobaTorusKnot",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NGT_OBJECT_3D_CONTROLLER_PROVIDER",
                    "type": "controller"
                }
            ],
            "selector": "ngt-soba-torus-knot",
            "styleUrls": [],
            "styles": [],
            "template": "<ngt-mesh\n  (ready)=\"ready.emit($event)\"\n  (animateReady)=\"animateReady.emit($event)\"\n  [object3dController]=\"object3dController\"\n  [material]=\"material?.material\"\n>\n  <ngt-torus-knot-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-torus-knot-geometry>\n  <ng-template #withoutArgs>\n    <ngt-torus-knot-geometry></ngt-torus-knot-geometry>\n  </ng-template>\n</ngt-mesh>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "args",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "ConstructorParameters<>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "animateReady",
                    "defaultValue": "new EventEmitter<NgtAnimationReady<TEntity>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                },
                {
                    "name": "ready",
                    "defaultValue": "new EventEmitter<TEntity>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 6,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "object3dController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtObject3dController",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_OBJECT_3D_WATCHED_CONTROLLER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "material",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtMaterial",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "NgtMaterial"
                        }
                    ],
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtTorusKnotGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-torus-knot',\n  exportAs: 'ngtSobaTorusKnot',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-torus-knot-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-torus-knot-geometry>\n      <ng-template #withoutArgs>\n        <ngt-torus-knot-geometry></ngt-torus-knot-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaTorusKnot extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.TorusKnotGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaTorusKnot],\n  exports: [NgtSobaTorusKnot],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtTorusKnotGeometryModule],\n})\nexport class NgtSobaTorusKnotModule {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NgtSobaExtender"
        },
        {
            "name": "NgtSobaTube",
            "id": "component-NgtSobaTube-bbb0e5f1954c9cf4f05c7815f54845585d635f0693c65e61a4140fcd8c3a3cc9e830a15c8fcd8cc14003d53099d8899f0d2bb8b2acba755d466992b833bf8b87",
            "file": "packages/soba/shapes/src/lib/tube/tube.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "ngtSobaTube",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NGT_OBJECT_3D_CONTROLLER_PROVIDER",
                    "type": "controller"
                }
            ],
            "selector": "ngt-soba-tube",
            "styleUrls": [],
            "styles": [],
            "template": "<ngt-mesh\n  (ready)=\"ready.emit($event)\"\n  (animateReady)=\"animateReady.emit($event)\"\n  [object3dController]=\"object3dController\"\n  [material]=\"material?.material\"\n>\n  <ngt-tube-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-tube-geometry>\n  <ng-template #withoutArgs>\n    <ngt-tube-geometry></ngt-tube-geometry>\n  </ng-template>\n</ngt-mesh>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "args",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "ConstructorParameters<>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "animateReady",
                    "defaultValue": "new EventEmitter<NgtAnimationReady<TEntity>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                },
                {
                    "name": "ready",
                    "defaultValue": "new EventEmitter<TEntity>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 6,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "object3dController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtObject3dController",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "NGT_OBJECT_3D_WATCHED_CONTROLLER"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "material",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtMaterial",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "NgtMaterial"
                        }
                    ],
                    "inheritance": {
                        "file": "NgtSobaExtender"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtTubeGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-tube',\n  exportAs: 'ngtSobaTube',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-tube-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-tube-geometry>\n      <ng-template #withoutArgs>\n        <ngt-tube-geometry></ngt-tube-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaTube extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.TubeGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaTube],\n  exports: [NgtSobaTube],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtTubeGeometryModule],\n})\nexport class NgtSobaTubeModule {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "object3dController",
                        "type": "NgtObject3dController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NgtSobaExtender"
        }
    ],
    "modules": [
        {
            "name": "NgtImageModule",
            "id": "module-NgtImageModule-99b9c410f595f9c7786afa8e0e1dd91a9c82d742fb3dc58e9a98dafb6eb985ca6f5e0039c4efa4277f45333f4aa076e1b4f34a6647942c256daa0d962c15621c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/abstractions/src/lib/image/image.component.ts",
            "methods": [],
            "sourceCode": "import {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtColor,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtPlaneGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { TextureLoaderService } from '@angular-three/soba/loaders';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport { Observable, tap } from 'rxjs';\nimport * as THREE from 'three';\nimport { NgtSobaImageShaderMaterial } from './image-shader-material.directive';\n\n@Component({\n  selector: 'ngt-soba-image[url]',\n  exportAs: 'ngtSobaImage',\n  template: `\n    <ng-container *ngIf=\"texture$ | async as texture\">\n      <ngt-mesh\n        [scale]=\"scale\"\n        [object3dController]=\"object3dController\"\n        (ready)=\"ready.emit($event)\"\n        (animateReady)=\"animateReady.emit($event)\"\n      >\n        <ngt-plane-geometry\n          [args]=\"[1, 1, segments, segments]\"\n        ></ngt-plane-geometry>\n        <ngt-soba-image-shader-material\n          [parameters]=\"{color, map: texture, zoom, grayscale, scale: planeBounds, imageBounds}\"\n        ></ngt-soba-image-shader-material>\n        <ng-content></ng-content>\n      </ngt-mesh>\n    </ng-container>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaImage\n  extends NgtSobaExtender<THREE.Mesh>\n  implements OnChanges\n{\n  @Input() segments?: number;\n  @Input() scale?: number;\n  @Input() color?: NgtColor;\n  @Input() zoom?: number;\n  @Input() grayscale?: number;\n\n  @Input() set url(v: string) {\n    this.texture$ = this.textureLoaderService.load(v).pipe(\n      tap((texture) => {\n        this.imageBounds = [texture.image.width, texture.image.height];\n      })\n    );\n  }\n\n  planeBounds?: [number, number];\n  imageBounds?: [number, number];\n\n  texture$?: Observable<THREE.Texture>;\n\n  constructor(\n    private textureLoaderService: TextureLoaderService,\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.planeBounds = Array.isArray(this.scale)\n      ? [this.scale[0], this.scale[1]]\n      : [this.scale, this.scale];\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaImage, NgtSobaImageShaderMaterial],\n  exports: [NgtSobaImage, NgtSobaImageShaderMaterial],\n  imports: [NgtCoreModule, NgtMeshModule, NgtPlaneGeometryModule, CommonModule],\n})\nexport class NgtImageModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgtSobaImage"
                        },
                        {
                            "name": "NgtSobaImageShaderMaterial"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgtSobaImage"
                        },
                        {
                            "name": "NgtSobaImageShaderMaterial"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgtSobaBillboardModule",
            "id": "module-NgtSobaBillboardModule-35fcd4030c8a72ff08139ac7f262695c919de148492f410783f66a0c8b840da3ecc9b8c75ba2c024ab3f3cb0ec2e33d7bae652feefea4e5963046ea316af65c5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/abstractions/src/lib/billboard/billboard.component.ts",
            "methods": [],
            "sourceCode": "import {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtAnimationReady,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtGroup, NgtGroupModule } from '@angular-three/core/group';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n  ViewChild,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-billboard',\n  exportAs: 'ngtSobaBillboard',\n  template: `\n    <ngt-group\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event); onAnimateReady($event)\"\n      [object3dController]=\"object3dController\"\n    >\n      <ng-content></ng-content>\n    </ngt-group>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaBillboard extends NgtSobaExtender<THREE.Group> {\n  @Input() follow = true;\n  @Input() lockX = false;\n  @Input() lockY = false;\n  @Input() lockZ = false;\n\n  @ViewChild(NgtGroup, { static: true }) group!: NgtGroup;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n\n  onAnimateReady({\n    animateObject,\n    renderState: { camera },\n  }: NgtAnimationReady<THREE.Group>) {\n    if (!this.follow) return;\n\n    // save previous rotation in case we're locking an axis\n    const prevRotation = animateObject.rotation.clone();\n\n    // always face the camera\n    animateObject.quaternion.copy(camera.quaternion);\n\n    // readjust any axis that is locked\n    if (this.lockX) animateObject.rotation.x = prevRotation.x;\n    if (this.lockY) animateObject.rotation.y = prevRotation.y;\n    if (this.lockZ) animateObject.rotation.z = prevRotation.z;\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaBillboard],\n  exports: [NgtSobaBillboard],\n  imports: [NgtCoreModule, NgtGroupModule],\n})\nexport class NgtSobaBillboardModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgtSobaBillboard"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgtSobaBillboard"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgtSobaBoxModule",
            "id": "module-NgtSobaBoxModule-dfec90604221d1b1f85b65f1fc8f1ea53198a128d898ff8c534f055120c492c961385fa3fe0fa752a9447464cb5deba3dd3649d3d4f0a831cf98104a45f45a62",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/shapes/src/lib/box/box.component.ts",
            "methods": [],
            "sourceCode": "// GENERATED\nimport {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtBoxGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-box',\n  exportAs: 'ngtSobaBox',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-box-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-box-geometry>\n      <ng-template #withoutArgs>\n        <ngt-box-geometry></ngt-box-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaBox extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.BoxGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaBox],\n  exports: [NgtSobaBox],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtBoxGeometryModule],\n})\nexport class NgtSobaBoxModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgtSobaBox"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgtSobaBox"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgtSobaCircleModule",
            "id": "module-NgtSobaCircleModule-20a878bee577a5c08300f9e395a8c62b529eadf83cadebd332ffd8ac9ed35d55ef4ecdd8ce8c8ebb3cc76b9eb96a540050a698e57e98faa76cf52db89219a03e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/shapes/src/lib/circle/circle.component.ts",
            "methods": [],
            "sourceCode": "// GENERATED\nimport {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtCircleGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-circle',\n  exportAs: 'ngtSobaCircle',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-circle-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-circle-geometry>\n      <ng-template #withoutArgs>\n        <ngt-circle-geometry></ngt-circle-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaCircle extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.CircleGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaCircle],\n  exports: [NgtSobaCircle],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtCircleGeometryModule],\n})\nexport class NgtSobaCircleModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgtSobaCircle"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgtSobaCircle"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgtSobaConeModule",
            "id": "module-NgtSobaConeModule-5d9bfe7249923a0435db8e19f9f831790c1225a815e40f6c011b2f300025f401bcc2937186dac7dbc00d56fc5517ea3c519ff338d3ff34356cf451ed0d7560a1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/shapes/src/lib/cone/cone.component.ts",
            "methods": [],
            "sourceCode": "// GENERATED\nimport {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtConeGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-cone',\n  exportAs: 'ngtSobaCone',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-cone-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-cone-geometry>\n      <ng-template #withoutArgs>\n        <ngt-cone-geometry></ngt-cone-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaCone extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.ConeGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaCone],\n  exports: [NgtSobaCone],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtConeGeometryModule],\n})\nexport class NgtSobaConeModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgtSobaCone"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgtSobaCone"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgtSobaCubicBezierLineModule",
            "id": "module-NgtSobaCubicBezierLineModule-68c8769f9dfdf20f0b2f0126e1b645619d144d1ede3603c3cdcfd54b67349c0ba23256cebcc22aa98d2b765ee510fdc4a978525bae70ee9ce3d8e6667599965f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/abstractions/src/lib/cubic-bezier-line/cubic-bezier-line.component.ts",
            "methods": [],
            "sourceCode": "import {\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n  NgtVector3,\n} from '@angular-three/core';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n  NgZone,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n} from '@angular/core';\nimport * as THREE from 'three';\nimport {\n  NGT_SOBA_LINE_CONTROLLER_PROVIDER,\n  NGT_SOBA_LINE_WATCHED_CONTROLLER,\n} from '../line/line-watched-controller.di';\nimport { NgtSobaLineModule } from '../line/line.component';\nimport { NgtSobaLineController } from '../line/line.controller';\n\n@Component({\n  selector: 'ngt-soba-cubic-bezier-line[start][end][midA][midB]',\n  exportAs: 'ngtSobaCubicBezierLine',\n  template: `\n    <ngt-soba-line\n      [points]=\"points\"\n      [object3dController]=\"object3dController\"\n      [sobaLineController]=\"sobaLineController\"\n    ></ngt-soba-line>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_SOBA_LINE_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaCubicBezierLine implements OnInit, OnChanges {\n  @Input() start!: NgtVector3;\n  @Input() end!: NgtVector3;\n  @Input() midA!: NgtVector3;\n  @Input() midB!: NgtVector3;\n  @Input() segments?: number = 20;\n\n  points!: Array<NgtVector3>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController,\n    @Inject(NGT_SOBA_LINE_WATCHED_CONTROLLER)\n    public sobaLineController: NgtSobaLineController,\n    private ngZone: NgZone\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.ngZone.runOutsideAngular(() => {\n      if (changes.start || changes.end || changes.mid || changes.segments) {\n        this.buildPoints();\n      }\n    });\n  }\n\n  ngOnInit() {\n    if (!this.points) {\n      this.buildPoints();\n    }\n  }\n\n  private buildPoints() {\n    const startV =\n      this.start instanceof THREE.Vector3\n        ? this.start\n        : new THREE.Vector3(...(this.start as number[]));\n    const endV =\n      this.end instanceof THREE.Vector3\n        ? this.end\n        : new THREE.Vector3(...(this.end as number[]));\n    const midAV =\n      this.midA instanceof THREE.Vector3\n        ? this.midA\n        : new THREE.Vector3(...(this.midA as number[]));\n    const midBV =\n      this.midB instanceof THREE.Vector3\n        ? this.midB\n        : new THREE.Vector3(...(this.midB as number[]));\n    this.points = new THREE.CubicBezierCurve3(\n      startV,\n      midAV,\n      midBV,\n      endV\n    ).getPoints(this.segments);\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaCubicBezierLine],\n  exports: [NgtSobaCubicBezierLine],\n  imports: [NgtCoreModule, NgtSobaLineModule],\n})\nexport class NgtSobaCubicBezierLineModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgtSobaCubicBezierLine"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NgtSobaLineModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgtSobaCubicBezierLine"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgtSobaCylinderModule",
            "id": "module-NgtSobaCylinderModule-161e78b47cb19b624e12273847a3af2d1b6f96487bbd74ac1adbd76f4f5d8142ffca2f196ef636da4d054a180d8d606e0ffec213b7b4f895a10ab866379b5700",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/shapes/src/lib/cylinder/cylinder.component.ts",
            "methods": [],
            "sourceCode": "// GENERATED\nimport {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtCylinderGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-cylinder',\n  exportAs: 'ngtSobaCylinder',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-cylinder-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-cylinder-geometry>\n      <ng-template #withoutArgs>\n        <ngt-cylinder-geometry></ngt-cylinder-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaCylinder extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.CylinderGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaCylinder],\n  exports: [NgtSobaCylinder],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtCylinderGeometryModule],\n})\nexport class NgtSobaCylinderModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgtSobaCylinder"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgtSobaCylinder"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgtSobaDodecahedronModule",
            "id": "module-NgtSobaDodecahedronModule-91f6d0545cc8ebf74af1212673510ef1c6f884f0eac469918cc584083955298d287560d43027ad81b0ec8610eff54a5982ddc5d768ac3ccc12097d468fa26cf9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/shapes/src/lib/dodecahedron/dodecahedron.component.ts",
            "methods": [],
            "sourceCode": "// GENERATED\nimport {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtDodecahedronGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-dodecahedron',\n  exportAs: 'ngtSobaDodecahedron',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-dodecahedron-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-dodecahedron-geometry>\n      <ng-template #withoutArgs>\n        <ngt-dodecahedron-geometry></ngt-dodecahedron-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaDodecahedron extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.DodecahedronGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaDodecahedron],\n  exports: [NgtSobaDodecahedron],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtDodecahedronGeometryModule],\n})\nexport class NgtSobaDodecahedronModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgtSobaDodecahedron"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgtSobaDodecahedron"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgtSobaEnvironmentModule",
            "id": "module-NgtSobaEnvironmentModule-c6d332a0e36d6b14a7a0dfaa42ccd422ac740109a34e787408cac49b2f8a0d7734ae291f736876bcb85456da25ad309003c47ae26117e56de749d66bb7669fae",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/abstractions/src/lib/environment/environment.directive.ts",
            "methods": [],
            "sourceCode": "import {\n  CanvasStore,\n  EnhancedComponentStore,\n  LoaderService,\n  NgtCoreModule,\n} from '@angular-three/core';\nimport { presetsObj, PresetsType } from '@angular-three/soba';\nimport { Directive, Input, NgModule, NgZone, OnInit } from '@angular/core';\nimport { Observable, switchMap, tap, withLatestFrom } from 'rxjs';\nimport * as THREE from 'three';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\n\ninterface NgtSobaEnvironmentState {\n  path: string;\n  background?: boolean;\n  files?: string | string[];\n  scene?: THREE.Scene;\n  extensions?: (loader: THREE.Loader) => void;\n  texture?: THREE.Texture;\n  map?: THREE.Texture;\n  oldBg: THREE.Texture | THREE.Color | null;\n  oldEnv: THREE.Texture | null;\n  firstEnvironmentUpdate: boolean;\n}\n\nconst initialSobaEnvironmentState: NgtSobaEnvironmentState = {\n  background: false,\n  files: ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'],\n  path: '',\n  oldBg: null,\n  oldEnv: null,\n  firstEnvironmentUpdate: false,\n  scene: undefined,\n  extensions: undefined,\n  texture: undefined,\n  map: undefined,\n};\n\nconst CUBEMAP_ROOT =\n  'https://rawcdn.githack.com/pmndrs/drei-assets/aa3600359ba664d546d05821bcbca42013587df2';\n\n@Directive({\n  selector: 'ngt-soba-environment',\n  exportAs: 'ngtSobaEnvironment',\n})\nexport class NgtSobaEnvironment\n  extends EnhancedComponentStore<NgtSobaEnvironmentState>\n  implements OnInit\n{\n  @Input() set background(v: boolean) {\n    this.updaters.setBackground(v);\n  }\n\n  @Input() set files(v: string | string[]) {\n    this.updaters.setFiles(v);\n  }\n\n  @Input() set path(v: string) {\n    this.updaters.setPath(v);\n  }\n\n  @Input() set preset(v: PresetsType) {\n    this.updaters.setFiles(presetsObj[v]);\n    this.updaters.setPath(CUBEMAP_ROOT + '/hdri/');\n  }\n\n  @Input() set scene(v: THREE.Scene) {\n    this.updaters.setScene(v);\n  }\n\n  @Input() set extensions(v: (loader: THREE.Loader) => void) {\n    this.updaters.setExtensions(v);\n  }\n\n  changes$ = this.select(\n    this.selectors.texture$,\n    this.selectors.scene$,\n    this.selectors.background$,\n    (texture, scene, background) => ({ texture, scene, background }),\n    { debounce: true }\n  );\n\n  constructor(\n    private loaderService: LoaderService,\n    private ngZone: NgZone,\n    private canvasStore: CanvasStore\n  ) {\n    super(initialSobaEnvironmentState);\n  }\n\n  ngOnInit() {\n    this.updateTextureEffect(\n      this.selectors.files$.pipe(\n        withLatestFrom(this.selectors.path$, this.selectors.extensions$),\n        switchMap(([files, path, extensions]) => {\n          // TODO: fix any\n          const isCubeMap = Array.isArray(files);\n          return this.loaderService.use(\n            (isCubeMap ? THREE.CubeTextureLoader : RGBELoader) as any,\n            (isCubeMap ? [files] : files) as any,\n            (loader) => {\n              loader.setPath(path);\n              if (extensions) extensions(loader);\n            }\n          ) as Observable<THREE.Texture | THREE.Texture[]>;\n        })\n      )\n    );\n\n    this.updateEnvironmentEffect(\n      this.changes$ as Observable<{\n        texture: THREE.Texture;\n        scene: THREE.Scene;\n        background: boolean;\n      }>\n    );\n  }\n\n  readonly updateTextureEffect = this.effect<THREE.Texture | THREE.Texture[]>(\n    (loaderResult$) =>\n      loaderResult$.pipe(\n        withLatestFrom(this.canvasStore.selectors.renderer$),\n        tap(([loaderResult, renderer]) => {\n          this.ngZone.runOutsideAngular(() => {\n            const map = this.isCubeMap\n              ? (loaderResult as THREE.Texture[])[0]\n              : (loaderResult as THREE.Texture);\n\n            const gen = new THREE.PMREMGenerator(renderer!);\n            const texture = NgtSobaEnvironment.getTexture(\n              map,\n              gen,\n              this.isCubeMap\n            ) as THREE.Texture;\n            gen.dispose();\n\n            this.patchState({ map, texture });\n          });\n        })\n      )\n  );\n\n  readonly updateEnvironmentEffect = this.effect<{\n    texture: THREE.Texture;\n    scene: THREE.Scene;\n    background: boolean;\n  }>((params$) =>\n    params$.pipe(\n      withLatestFrom(\n        this.canvasStore.selectors.scene$,\n        this.selectors.firstEnvironmentUpdate$,\n        this.canvasStore.selectors.renderer$\n      ),\n      tap(\n        ([\n          { texture, scene, background },\n          defaultScene,\n          firstEnvironmentUpdate,\n        ]) => {\n          this.ngZone.runOutsideAngular(() => {\n            if (firstEnvironmentUpdate) {\n              this.cleanUpEffect();\n            }\n\n            const oldBg = scene ? scene.background : defaultScene!.background;\n            const oldEnv = scene\n              ? scene.environment\n              : defaultScene!.environment;\n\n            this.patchState({ oldBg, oldEnv });\n\n            if (scene) {\n              scene.environment = texture;\n              if (background) scene.background = texture;\n            } else {\n              defaultScene!.environment = texture;\n              if (background) defaultScene!.background = texture;\n            }\n\n            this.patchState({ firstEnvironmentUpdate: true });\n          });\n        }\n      )\n    )\n  );\n\n  cleanUpEffect = this.effect(($) =>\n    $.pipe(\n      withLatestFrom(\n        this.selectors.texture$,\n        this.selectors.scene$,\n        this.canvasStore.selectors.scene$,\n        this.selectors.oldBg$,\n        this.selectors.oldEnv$\n      ),\n      tap(([, texture, scene, defaultScene, oldBg, oldEnv]) => {\n        this.ngZone.runOutsideAngular(() => {\n          if (scene) {\n            scene.environment = oldEnv;\n            scene.background = oldBg;\n          } else {\n            defaultScene!.environment = oldEnv;\n            defaultScene!.background = oldBg;\n          }\n          texture!.dispose();\n        });\n      })\n    )\n  );\n\n  get isCubeMap() {\n    return Array.isArray(this.files);\n  }\n\n  ngOnDestroy() {\n    this.cleanUpEffect();\n    super.ngOnDestroy();\n  }\n\n  private static getTexture(\n    texture: THREE.Texture | THREE.CubeTexture,\n    gen: THREE.PMREMGenerator,\n    isCubeMap: boolean\n  ) {\n    if (isCubeMap) {\n      gen.compileEquirectangularShader();\n      return gen.fromCubemap(texture as THREE.CubeTexture).texture;\n    }\n    return gen.fromEquirectangular(texture).texture;\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaEnvironment],\n  exports: [NgtSobaEnvironment],\n  imports: [NgtCoreModule],\n})\nexport class NgtSobaEnvironmentModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgtSobaEnvironment"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgtSobaEnvironment"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgtSobaExtrudeModule",
            "id": "module-NgtSobaExtrudeModule-bc778c80b3a90aa41cc6124fd06df00243bff41ef66318689a92743b3c9df67743acbb90fbb053242a7dacc2d275142093f2c8cab14e78db3b321ea4f2346467",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/shapes/src/lib/extrude/extrude.component.ts",
            "methods": [],
            "sourceCode": "// GENERATED\nimport {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtExtrudeGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-extrude',\n  exportAs: 'ngtSobaExtrude',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-extrude-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-extrude-geometry>\n      <ng-template #withoutArgs>\n        <ngt-extrude-geometry></ngt-extrude-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaExtrude extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.ExtrudeGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaExtrude],\n  exports: [NgtSobaExtrude],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtExtrudeGeometryModule],\n})\nexport class NgtSobaExtrudeModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgtSobaExtrude"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgtSobaExtrude"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgtSobaIcosahedronModule",
            "id": "module-NgtSobaIcosahedronModule-f8031201daef05ff56bd4ee79e09795c4f8f3446ee8ab83174e6968063ad28ebe213b570736e2047ef2230ab86d6c48b9a74142a8c1ec36c06e1c72e1be0b1b1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/shapes/src/lib/icosahedron/icosahedron.component.ts",
            "methods": [],
            "sourceCode": "// GENERATED\nimport {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtIcosahedronGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-icosahedron',\n  exportAs: 'ngtSobaIcosahedron',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-icosahedron-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-icosahedron-geometry>\n      <ng-template #withoutArgs>\n        <ngt-icosahedron-geometry></ngt-icosahedron-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaIcosahedron extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.IcosahedronGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaIcosahedron],\n  exports: [NgtSobaIcosahedron],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtIcosahedronGeometryModule],\n})\nexport class NgtSobaIcosahedronModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgtSobaIcosahedron"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgtSobaIcosahedron"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgtSobaLatheModule",
            "id": "module-NgtSobaLatheModule-a13ece4503c5b4cb15c03f7ac48c4692282f6e8f8b4ef0f059176e9da1c7594d49770df43b59be4828bebad756651518f48d8fcf2e6c8903bad1bfbde082f029",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/shapes/src/lib/lathe/lathe.component.ts",
            "methods": [],
            "sourceCode": "// GENERATED\nimport {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtLatheGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-lathe',\n  exportAs: 'ngtSobaLathe',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-lathe-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-lathe-geometry>\n      <ng-template #withoutArgs>\n        <ngt-lathe-geometry></ngt-lathe-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaLathe extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.LatheGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaLathe],\n  exports: [NgtSobaLathe],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtLatheGeometryModule],\n})\nexport class NgtSobaLatheModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgtSobaLathe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgtSobaLathe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgtSobaLineModule",
            "id": "module-NgtSobaLineModule-51994c7ec4d43131e086c0ea5771f2fd3c4a4f39c428d7786f67dd47bff001ea6098cb5637795a7c02610f7b992f3bd42e838ebbab0c76d69b2302ee8721c162",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/abstractions/src/lib/line/line.component.ts",
            "methods": [],
            "sourceCode": "import {\n  DestroyedService,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n  NgtVector3,\n} from '@angular-three/core';\nimport { NgtLineGeometryModule } from '@angular-three/core/geometries';\nimport { NgtLineMaterialModule } from '@angular-three/core/materials';\nimport { NgtLine2Module } from '@angular-three/core/meshes';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n  NgZone,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n} from '@angular/core';\nimport { merge, ReplaySubject, takeUntil } from 'rxjs';\nimport * as THREE from 'three';\nimport { LineGeometry } from 'three/examples/jsm/lines/LineGeometry';\nimport {\n  NGT_SOBA_LINE_CONTROLLER_PROVIDER,\n  NGT_SOBA_LINE_WATCHED_CONTROLLER,\n} from './line-watched-controller.di';\nimport { NgtSobaLineController } from './line.controller';\n\n@Component({\n  selector: 'ngt-soba-line[points]',\n  exportAs: 'ngtSobaLine',\n  template: `\n    <ngt-line2\n      (ready)=\"sobaLineController.onLineReady($event)\"\n      (animateReady)=\"sobaLineController.animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n    >\n      <ngt-line-geometry (ready)=\"onGeometryReady($event)\"></ngt-line-geometry>\n      <ngt-line-material\n        (ready)=\"sobaLineController.onMaterialReady($event)\"\n        [parameters]=\"sobaLineController.parameters\"\n      ></ngt-line-material>\n    </ngt-line2>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_SOBA_LINE_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaLine implements OnChanges, OnInit {\n  @Input() points!: Array<NgtVector3>;\n\n  resolution = new THREE.Vector2(512, 512);\n\n  private pointsChange$ = new ReplaySubject<SimpleChanges>(1);\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController,\n    @Inject(NGT_SOBA_LINE_WATCHED_CONTROLLER)\n    public sobaLineController: NgtSobaLineController,\n    private ngZone: NgZone,\n    private destroyed: DestroyedService\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.ngZone.runOutsideAngular(() => {\n      this.sobaLineController.mergeParameters({ resolution: this.resolution });\n\n      if (changes.points) {\n        this.pointsChange$.next(changes);\n      }\n    });\n  }\n\n  ngOnInit() {\n    merge(this.pointsChange$, this.sobaLineController.change$)\n      .pipe(takeUntil(this.destroyed))\n      .subscribe((changes) => {\n        if (changes.point || changes.vertexColors) {\n          if (this.sobaLineController.geometry) {\n            this.setupGeometry();\n          }\n        }\n      });\n  }\n\n  onGeometryReady(geometry: LineGeometry) {\n    this.ngZone.runOutsideAngular(() => {\n      this.sobaLineController.geometry = geometry;\n      this.setupGeometry();\n    });\n  }\n\n  private setupGeometry() {\n    const pointValues = this.points.map((p) =>\n      p instanceof THREE.Vector3 ? p.toArray() : p\n    );\n    this.sobaLineController.geometry.setPositions((pointValues as any).flat());\n\n    if (this.sobaLineController.vertexColors) {\n      const colorValues = this.sobaLineController.vertexColors.map((c) =>\n        c instanceof THREE.Color ? c.toArray() : c\n      );\n      this.sobaLineController.geometry.setColors((colorValues as any).flat());\n    }\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaLine, NgtSobaLineController],\n  exports: [NgtSobaLine, NgtSobaLineController],\n  imports: [\n    NgtCoreModule,\n    NgtLine2Module,\n    NgtLineGeometryModule,\n    NgtLineMaterialModule,\n  ],\n})\nexport class NgtSobaLineModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgtSobaLine"
                        },
                        {
                            "name": "NgtSobaLineController"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgtSobaLine"
                        },
                        {
                            "name": "NgtSobaLineController"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgtSobaModule",
            "id": "module-NgtSobaModule-0786e317c6c6d1bfd8b6c7db25c6c7754fae7b0cc598aaf0a4e6d38411644619f20be9413f0d51e739f817a6597072933c1ec97ac6a55ec4f39f89ff4fe4bacb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/src/lib/soba.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n  imports: [CommonModule],\n})\nexport class NgtSobaModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgtSobaOctahedronModule",
            "id": "module-NgtSobaOctahedronModule-71f8b3bc36e5ae6fd23f562f933c386d7a550222fab233bb43223f8971308bb1648178cd84bbe8719a67e7908dfa46cc544c768a60c2131d4f54793bfb74affd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/shapes/src/lib/octahedron/octahedron.component.ts",
            "methods": [],
            "sourceCode": "// GENERATED\nimport {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtOctahedronGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-octahedron',\n  exportAs: 'ngtSobaOctahedron',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-octahedron-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-octahedron-geometry>\n      <ng-template #withoutArgs>\n        <ngt-octahedron-geometry></ngt-octahedron-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaOctahedron extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.OctahedronGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaOctahedron],\n  exports: [NgtSobaOctahedron],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtOctahedronGeometryModule],\n})\nexport class NgtSobaOctahedronModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgtSobaOctahedron"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgtSobaOctahedron"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgtSobaOrthographicCameraModule",
            "id": "module-NgtSobaOrthographicCameraModule-79b5f3028aa4a6b50f57f953e875d1308f90abfa315155484a35610211194d76d35267ce93d9dfcb22b4caf8bbd9d3303686a643b9d86fb0b755ca64fa7387e8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/cameras/src/lib/orthographic-camera/orthographic-camera.component.ts",
            "methods": [],
            "sourceCode": "import {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NgtCoreModule,\n} from '@angular-three/core';\nimport { NgtOrthographicCameraModule } from '@angular-three/core/cameras';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  NgModule,\n  OnInit,\n} from '@angular/core';\nimport { SobaOrthographicCameraStore } from './orthographic-camera.store';\n\n@Component({\n  selector: 'ngt-soba-orthographic-camera',\n  exportAs: 'ngtSobaOrthographicCamera',\n  template: `\n    <ng-container *ngIf=\"vm$ | async as vm\">\n      <ngt-orthographic-camera\n        [args]=\"[vm.left, vm.right, vm.top, vm.bottom, vm.near, vm.far]\"\n        [object3dController]=\"vm.object3dController\"\n      >\n        <ng-content></ng-content>\n      </ngt-orthographic-camera>\n    </ng-container>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER, SobaOrthographicCameraStore],\n})\nexport class NgtSobaOrthographicCamera implements OnInit {\n  @Input() set makeDefault(v: boolean) {\n    this.sobaOrthographicCameraStore.updaters.setMakeDefault(v);\n  }\n\n  @Input() set manual(v: boolean) {\n    this.sobaOrthographicCameraStore.updaters.setManual(v);\n  }\n\n  @Input() set near(v: number) {\n    this.sobaOrthographicCameraStore.updaters.setNear(v);\n  }\n\n  @Input() set far(v: number) {\n    this.sobaOrthographicCameraStore.updaters.setFar(v);\n  }\n\n  readonly vm$ = this.sobaOrthographicCameraStore.vm$;\n\n  constructor(\n    private sobaOrthographicCameraStore: SobaOrthographicCameraStore\n  ) {}\n\n  ngOnInit() {\n    this.sobaOrthographicCameraStore.initEffect();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaOrthographicCamera],\n  exports: [NgtSobaOrthographicCamera],\n  imports: [NgtOrthographicCameraModule, NgtCoreModule, CommonModule],\n})\nexport class NgtSobaOrthographicCameraModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgtSobaOrthographicCamera"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgtSobaOrthographicCamera"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgtSobaParametricModule",
            "id": "module-NgtSobaParametricModule-29e58a8f18c9b92a4141c64e22c7c7afa666b01d8172c8710d2fb8a1b22e9406dee3b0c033805672c1ec2d65550d6a4fba1d72361d0d3fdd8a88b6f22ed70930",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/shapes/src/lib/parametric/parametric.component.ts",
            "methods": [],
            "sourceCode": "// GENERATED\nimport {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtParametricGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport { ParametricGeometry } from 'three/examples/jsm/geometries/ParametricGeometry';\n\n@Component({\n  selector: 'ngt-soba-parametric',\n  exportAs: 'ngtSobaParametric',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-parametric-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-parametric-geometry>\n      <ng-template #withoutArgs>\n        <ngt-parametric-geometry></ngt-parametric-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaParametric extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof ParametricGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaParametric],\n  exports: [NgtSobaParametric],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtParametricGeometryModule],\n})\nexport class NgtSobaParametricModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgtSobaParametric"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgtSobaParametric"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgtSobaPlaneModule",
            "id": "module-NgtSobaPlaneModule-e3bf9b5349c87933dc528a68eb5593acfc3b70eec714786b23b702ffbd6cf22ad51c6a202862479e4d6bd83d93485086c268b7c5f2c51f4bef960ead56f1a053",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/shapes/src/lib/plane/plane.component.ts",
            "methods": [],
            "sourceCode": "// GENERATED\nimport {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtPlaneGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-plane',\n  exportAs: 'ngtSobaPlane',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-plane-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-plane-geometry>\n      <ng-template #withoutArgs>\n        <ngt-plane-geometry></ngt-plane-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaPlane extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.PlaneGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaPlane],\n  exports: [NgtSobaPlane],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtPlaneGeometryModule],\n})\nexport class NgtSobaPlaneModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgtSobaPlane"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgtSobaPlane"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgtSobaPolyhedronModule",
            "id": "module-NgtSobaPolyhedronModule-ecef1212f26ef16fbee3690a796f2da3606dde51591f73db374880433c8619857b9aebc93be1a0df72f78c9d700078abb42276e8adb4a1c8d79579144530b7dc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/shapes/src/lib/polyhedron/polyhedron.component.ts",
            "methods": [],
            "sourceCode": "// GENERATED\nimport {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtPolyhedronGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-polyhedron',\n  exportAs: 'ngtSobaPolyhedron',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-polyhedron-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-polyhedron-geometry>\n      <ng-template #withoutArgs>\n        <ngt-polyhedron-geometry></ngt-polyhedron-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaPolyhedron extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.PolyhedronGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaPolyhedron],\n  exports: [NgtSobaPolyhedron],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtPolyhedronGeometryModule],\n})\nexport class NgtSobaPolyhedronModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgtSobaPolyhedron"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgtSobaPolyhedron"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgtSobaPositionalAudioModule",
            "id": "module-NgtSobaPositionalAudioModule-95331cfeac5913015aa179c1b43820e329bf8d1d43450cb17e74661d9a3bce031b0db1ef966d92b293be7a2e6e1959bf27d1c620fa3f7112f76ca7c29d28489c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/abstractions/src/lib/positional-audio/positional-audio.component.ts",
            "methods": [],
            "sourceCode": "import {\n  NGT_AUDIO_CONTROLLER_PROVIDER,\n  NGT_AUDIO_WATCHED_CONTROLLER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtAudioController,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtPositionalAudioModule } from '@angular-three/core/audios';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n  NgZone,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport * as THREE from 'three';\nimport { SobaPositionalAudioStore } from './positional-audio.store';\n\n@Component({\n  selector: 'ngt-soba-positional-audio[url]',\n  exportAs: 'ngtSobaPositionalAudio',\n  template: `\n    <ngt-positional-audio\n      *ngIf=\"listener$ | async as listener\"\n      (ready)=\"onAudioReady($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [listener]=\"listener\"\n      [object3dController]=\"object3dController\"\n      [audioController]=\"audioController\"\n    >\n      <ng-content></ng-content>\n    </ngt-positional-audio>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_AUDIO_CONTROLLER_PROVIDER, SobaPositionalAudioStore],\n})\nexport class NgtSobaPositionalAudio\n  extends NgtSobaExtender<THREE.PositionalAudio>\n  implements OnInit, OnDestroy\n{\n  @Input() set url(v: string) {\n    this.sobaPositionalAudioStore.updaters.setUrl(v);\n  }\n\n  @Input() set distance(v: number) {\n    this.sobaPositionalAudioStore.updaters.setDistance(v);\n  }\n\n  @Input() set loop(v: boolean) {\n    this.sobaPositionalAudioStore.updaters.setLoop(v);\n  }\n\n  readonly listener$ = this.sobaPositionalAudioStore.selectors.listener$;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController,\n    @Inject(NGT_AUDIO_WATCHED_CONTROLLER)\n    public audioController: NgtAudioController,\n    private ngZone: NgZone,\n    private sobaPositionalAudioStore: SobaPositionalAudioStore\n  ) {\n    super();\n  }\n\n  ngOnInit() {\n    this.sobaPositionalAudioStore.initEffect(\n      this.audioController.autoplay || false\n    );\n  }\n\n  ngOnDestroy() {\n    this.sobaPositionalAudioStore.destroyEffect();\n  }\n\n  onAudioReady(audio: THREE.PositionalAudio) {\n    this.ngZone.runOutsideAngular(() => {\n      this.sobaPositionalAudioStore.updaters.setSound(audio);\n      this.ready.emit(audio);\n    });\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaPositionalAudio],\n  exports: [NgtSobaPositionalAudio],\n  imports: [CommonModule, NgtCoreModule, NgtPositionalAudioModule],\n})\nexport class NgtSobaPositionalAudioModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgtSobaPositionalAudio"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgtSobaPositionalAudio"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgtSobaQuadraticBezierLineModule",
            "id": "module-NgtSobaQuadraticBezierLineModule-45ec264c0a755769d1d787acd4bacfe000609aadd413d9749c90d47e5f2076c465586e08bc82aeda2b62a8b108cb2904dfd30544bb1f7a690d6c70ba847208e8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/abstractions/src/lib/quadratic-bezier-line/quadratic-bezier-line.component.ts",
            "methods": [],
            "sourceCode": "import {\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n  NgtVector3,\n} from '@angular-three/core';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n  NgZone,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n} from '@angular/core';\nimport * as THREE from 'three';\nimport { NGT_SOBA_LINE_CONTROLLER_PROVIDER } from '../line/line-watched-controller.di';\nimport { NgtSobaLineModule } from '../line/line.component';\nimport { NgtSobaLineController } from '../line/line.controller';\n\n@Component({\n  selector: 'ngt-soba-quadratic-bezier-line[start][end]',\n  exportAs: 'ngtSobaQuadraticBezierLine',\n  template: `\n    <ngt-soba-line\n      [points]=\"points\"\n      [object3dController]=\"object3dController\"\n      [sobaLineController]=\"sobaLineController\"\n    ></ngt-soba-line>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_SOBA_LINE_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaQuadraticBezierLine implements OnChanges, OnInit {\n  @Input() start!: NgtVector3;\n  @Input() end!: NgtVector3;\n  @Input() mid?: NgtVector3;\n  @Input() segments?: number = 20;\n\n  points!: Array<NgtVector3>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController,\n    @Inject(NGT_SOBA_LINE_CONTROLLER_PROVIDER)\n    public sobaLineController: NgtSobaLineController,\n    private ngZone: NgZone\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.ngZone.runOutsideAngular(() => {\n      if (changes.start || changes.end || changes.mid || changes.segments) {\n        this.buildPoints();\n      }\n    });\n  }\n\n  ngOnInit() {\n    if (!this.points) {\n      this.buildPoints();\n    }\n  }\n\n  private buildPoints() {\n    const startV =\n      this.start instanceof THREE.Vector3\n        ? this.start\n        : new THREE.Vector3(...(this.start as number[]));\n    const endV =\n      this.end instanceof THREE.Vector3\n        ? this.end\n        : new THREE.Vector3(...(this.end as number[]));\n    const mid2 =\n      this.mid ||\n      startV\n        .clone()\n        .add(endV.clone().sub(startV))\n        .add(new THREE.Vector3(0, startV.y - endV.y, 0));\n    const midV =\n      mid2 instanceof THREE.Vector3\n        ? mid2\n        : new THREE.Vector3(...(mid2 as number[]));\n    this.points = new THREE.QuadraticBezierCurve3(startV, midV, endV).getPoints(\n      this.segments\n    );\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaQuadraticBezierLine],\n  exports: [NgtSobaQuadraticBezierLine],\n  imports: [NgtCoreModule, NgtSobaLineModule],\n})\nexport class NgtSobaQuadraticBezierLineModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgtSobaQuadraticBezierLine"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NgtSobaLineModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgtSobaQuadraticBezierLine"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgtSobaRingModule",
            "id": "module-NgtSobaRingModule-cd933a68ca4847809453eafe2b78d11e20d76e6021735eaf802190ed02db5302cc07ddd66a523ac7ad388cb8391e941e21de5c617bddc4b257dc44cbeb0edc94",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/shapes/src/lib/ring/ring.component.ts",
            "methods": [],
            "sourceCode": "// GENERATED\nimport {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtRingGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-ring',\n  exportAs: 'ngtSobaRing',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-ring-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-ring-geometry>\n      <ng-template #withoutArgs>\n        <ngt-ring-geometry></ngt-ring-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaRing extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.RingGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaRing],\n  exports: [NgtSobaRing],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtRingGeometryModule],\n})\nexport class NgtSobaRingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgtSobaRing"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgtSobaRing"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgtSobaSphereModule",
            "id": "module-NgtSobaSphereModule-fa961813a0182ab5c869079c7906d7cd60d27a48268f1ed7a33fc006f5b29d41bcc8d83eea35ea05add50a62d8cda33621e75097a78af43e561b73a781956e12",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/shapes/src/lib/sphere/sphere.component.ts",
            "methods": [],
            "sourceCode": "// GENERATED\nimport {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtSphereGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-sphere',\n  exportAs: 'ngtSobaSphere',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-sphere-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-sphere-geometry>\n      <ng-template #withoutArgs>\n        <ngt-sphere-geometry></ngt-sphere-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaSphere extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.SphereGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaSphere],\n  exports: [NgtSobaSphere],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtSphereGeometryModule],\n})\nexport class NgtSobaSphereModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgtSobaSphere"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgtSobaSphere"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgtSobaTetrahedronModule",
            "id": "module-NgtSobaTetrahedronModule-42f7bbb62afa1513f506d3814a1c26f26d0653529cd635d44fad704e264f3477dab8f0fb1b7dbeb1861a8a13c1c93d961d7c6cdbe49b029265af16da53ef9b44",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/shapes/src/lib/tetrahedron/tetrahedron.component.ts",
            "methods": [],
            "sourceCode": "// GENERATED\nimport {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtTetrahedronGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-tetrahedron',\n  exportAs: 'ngtSobaTetrahedron',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-tetrahedron-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-tetrahedron-geometry>\n      <ng-template #withoutArgs>\n        <ngt-tetrahedron-geometry></ngt-tetrahedron-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaTetrahedron extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.TetrahedronGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaTetrahedron],\n  exports: [NgtSobaTetrahedron],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtTetrahedronGeometryModule],\n})\nexport class NgtSobaTetrahedronModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgtSobaTetrahedron"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgtSobaTetrahedron"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgtSobaTextModule",
            "id": "module-NgtSobaTextModule-67d345b0aa9535898903d034e6c6b7cd616b0e8ba1b6bbdaaabac40e519181be7910d5861a6b47a156ad10df4541fc1f4a0f6e5d38a42d7da4ff093972838db1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/abstractions/src/lib/text/text.component.ts",
            "methods": [],
            "sourceCode": "import {\n  applyProps,\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NgtColor,\n  NgtCommonMesh,\n  NgtCoreModule,\n  NgtObject3d,\n  NgtPrimitiveModule,\n  NgtVector4,\n} from '@angular-three/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  EventEmitter,\n  Input,\n  NgModule,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\n// @ts-ignore\nimport { Text as TextMeshImpl } from 'troika-three-text';\nimport { NgtSobaTextContent } from './text-content.directive';\n\n@Component({\n  selector: 'ngt-soba-text',\n  exportAs: 'ngtSobaText',\n  template: `\n    <ng-container *ngIf=\"object3d\">\n      <ngt-primitive [object]=\"object3d\" (ready)=\"onTroikaTextReady($event)\">\n        <ng-content></ng-content>\n      </ngt-primitive>\n    </ng-container>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    { provide: NgtObject3d, useExisting: NgtSobaText },\n    NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  ],\n})\nexport class NgtSobaText\n  extends NgtCommonMesh<TextMeshImpl>\n  implements OnChanges, OnDestroy, OnInit\n{\n  @Input() color?: NgtColor;\n  @Input() fontSize?: number;\n  @Input() maxWidth?: number;\n  @Input() lineHeight?: number;\n  @Input() letterSpacing?: number;\n  @Input() textAlign?: 'left' | 'right' | 'center' | 'justify';\n  @Input() font?: string;\n  @Input() anchorX: number | 'left' | 'center' | 'right' = 'center';\n  @Input() anchorY:\n    | number\n    | 'top'\n    | 'top-baseline'\n    | 'middle'\n    | 'bottom-baseline'\n    | 'bottom' = 'middle';\n  @Input() clipRect?: NgtVector4;\n  @Input() depthOffset?: number;\n  @Input() direction?: 'auto' | 'ltr' | 'rtl';\n  @Input() overflowWrap?: 'normal' | 'break-word';\n  @Input() whiteSpace?: 'normal' | 'overflowWrap' | 'overflowWrap';\n  @Input() outlineWidth?: number | string;\n  @Input() outlineOffsetX?: number | string;\n  @Input() outlineOffsetY?: number | string;\n  @Input() outlineBlur?: number | string;\n  @Input() outlineColor?: NgtColor;\n  @Input() outlineOpacity?: number;\n  @Input() strokeWidth?: number | string;\n  @Input() strokeColor?: NgtColor;\n  @Input() strokeOpacity?: number;\n  @Input() fillOpacity?: number;\n  @Input() debugSDF?: boolean;\n\n  @Output() sync = new EventEmitter<TextMeshImpl>();\n\n  @ContentChild(NgtSobaTextContent, { static: true })\n  textContent!: NgtSobaTextContent;\n\n  ngOnInit() {\n    if (!this.textContent) {\n      console.warn(\n        '<ngt-text> should have a <ngt-soba-text-content> as a content child.'\n      );\n    }\n  }\n\n  ngOnChanges() {\n    this.ngZone.runOutsideAngular(() => {\n      if (this.object3d && this.textContent) {\n        this.object3d.sync(() => {\n          this.sync.emit(this.object3d);\n        });\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.ngZone.runOutsideAngular(() => {\n      if (this.object3d && this.textContent) {\n        this.object3d.dispose();\n      }\n    });\n  }\n\n  meshType = TextMeshImpl;\n\n  onTroikaTextReady(troikaText: TextMeshImpl) {\n    this.ngZone.runOutsideAngular(() => {\n      if (this.textContent) {\n        troikaText.text = this.textContent.text;\n        applyProps(troikaText, {\n          color: this.color,\n          fontSize: this.fontSize,\n          maxWidth: this.maxWidth,\n          lineHeight: this.lineHeight,\n          letterSpacing: this.letterSpacing,\n          textAlign: this.textAlign,\n          font: this.font,\n          anchorX: this.anchorX,\n          anchorY: this.anchorY,\n          clipRect: this.clipRect,\n          depthOffset: this.depthOffset,\n          direction: this.direction,\n          overflowWrap: this.overflowWrap,\n          whiteSpace: this.whiteSpace,\n          outlineWidth: this.outlineWidth,\n          outlineOffsetX: this.outlineOffsetX,\n          outlineOffsetY: this.outlineOffsetY,\n          outlineBlur: this.outlineBlur,\n          outlineColor: this.outlineColor,\n          outlineOpacity: this.outlineOpacity,\n          strokeWidth: this.strokeWidth,\n          strokeColor: this.strokeColor,\n          strokeOpacity: this.strokeOpacity,\n          fillOpacity: this.fillOpacity,\n          debugSDF: this.debugSDF,\n        });\n      }\n    });\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaText, NgtSobaTextContent],\n  exports: [NgtSobaText, NgtSobaTextContent],\n  imports: [NgtPrimitiveModule, NgtCoreModule, CommonModule],\n})\nexport class NgtSobaTextModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgtSobaText"
                        },
                        {
                            "name": "NgtSobaTextContent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgtSobaText"
                        },
                        {
                            "name": "NgtSobaTextContent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgtSobaTorusKnotModule",
            "id": "module-NgtSobaTorusKnotModule-af5e28f356223a5caccd71432836104213c51be99e064acba88942b559cc2b8ea95f25fc7ca7580a117a672823fe40b170d14c7eff5038a25267ebcaa1e33887",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/shapes/src/lib/torus-knot/torus-knot.component.ts",
            "methods": [],
            "sourceCode": "// GENERATED\nimport {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtTorusKnotGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-torus-knot',\n  exportAs: 'ngtSobaTorusKnot',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-torus-knot-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-torus-knot-geometry>\n      <ng-template #withoutArgs>\n        <ngt-torus-knot-geometry></ngt-torus-knot-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaTorusKnot extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.TorusKnotGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaTorusKnot],\n  exports: [NgtSobaTorusKnot],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtTorusKnotGeometryModule],\n})\nexport class NgtSobaTorusKnotModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgtSobaTorusKnot"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgtSobaTorusKnot"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgtSobaTorusModule",
            "id": "module-NgtSobaTorusModule-627fc80c69e753a9540c5b24af9b45f08bf93107903ba4bae836c7b07675543fc392703487e8e1744c8d54e28f1bbf18fed0f6307c6a76814c22e4fc15ada164",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/shapes/src/lib/torus/torus.component.ts",
            "methods": [],
            "sourceCode": "// GENERATED\nimport {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtTorusGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-torus',\n  exportAs: 'ngtSobaTorus',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-torus-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-torus-geometry>\n      <ng-template #withoutArgs>\n        <ngt-torus-geometry></ngt-torus-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaTorus extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.TorusGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaTorus],\n  exports: [NgtSobaTorus],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtTorusGeometryModule],\n})\nexport class NgtSobaTorusModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgtSobaTorus"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgtSobaTorus"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgtSobaTubeModule",
            "id": "module-NgtSobaTubeModule-bbb0e5f1954c9cf4f05c7815f54845585d635f0693c65e61a4140fcd8c3a3cc9e830a15c8fcd8cc14003d53099d8899f0d2bb8b2acba755d466992b833bf8b87",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/soba/shapes/src/lib/tube/tube.component.ts",
            "methods": [],
            "sourceCode": "// GENERATED\nimport {\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  NGT_OBJECT_3D_WATCHED_CONTROLLER,\n  NgtCoreModule,\n  NgtObject3dController,\n} from '@angular-three/core';\nimport { NgtTubeGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\nimport { NgtSobaExtender } from '@angular-three/soba';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  NgModule,\n} from '@angular/core';\nimport * as THREE from 'three';\n\n@Component({\n  selector: 'ngt-soba-tube',\n  exportAs: 'ngtSobaTube',\n  template: `\n    <ngt-mesh\n      (ready)=\"ready.emit($event)\"\n      (animateReady)=\"animateReady.emit($event)\"\n      [object3dController]=\"object3dController\"\n      [material]=\"material?.material\"\n    >\n      <ngt-tube-geometry *ngIf=\"args;else withoutArgs\" [args]=\"args\"></ngt-tube-geometry>\n      <ng-template #withoutArgs>\n        <ngt-tube-geometry></ngt-tube-geometry>\n      </ng-template>\n    </ngt-mesh>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [NGT_OBJECT_3D_CONTROLLER_PROVIDER],\n})\nexport class NgtSobaTube extends NgtSobaExtender<THREE.Mesh> {\n  @Input() args?: ConstructorParameters<typeof THREE.TubeGeometry>;\n\n  constructor(\n    @Inject(NGT_OBJECT_3D_WATCHED_CONTROLLER)\n    public object3dController: NgtObject3dController\n  ) {\n    super();\n  }\n}\n\n@NgModule({\n  declarations: [NgtSobaTube],\n  exports: [NgtSobaTube],\n  imports: [CommonModule, NgtCoreModule, NgtMeshModule, NgtTubeGeometryModule],\n})\nexport class NgtSobaTubeModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgtSobaTube"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgtSobaTube"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "CUBEMAP_ROOT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/soba/abstractions/src/lib/environment/environment.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'https://rawcdn.githack.com/pmndrs/drei-assets/aa3600359ba664d546d05821bcbca42013587df2'"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/soba/abstractions/src/lib/environment/environment.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<NgtSobaEnvironment>",
                "defaultValue": "(args) => {\n  return {\n    template: `\n    <ngt-canvas [camera]='{position: [0, 0, 10]}'>\n      <ngt-stats></ngt-stats>\n      <ngt-ambient-light [intensity]='0.8'></ngt-ambient-light>\n      <ngt-point-light [intensity]='1' [position]='[0, 6, 0]'></ngt-point-light>\n      <ngt-mesh>\n        <ngt-torus-knot-geometry [args]='[1, 0.5, 128, 32]'></ngt-torus-knot-geometry>\n        <ngt-mesh-standard-material [parameters]='{metalness: 1, roughness: 0}'></ngt-mesh-standard-material>\n      </ngt-mesh>\n      <ngt-soba-environment preset='warehouse' [background]='true'></ngt-soba-environment>\n\n      <ngt-orbit-controls\n        (ready)='$event.autoRotate = true;'\n        (animateReady)='$event.animateObject.update()'>\n      </ngt-orbit-controls>\n    </ngt-canvas>\n  `,\n  };\n}"
            },
            {
                "name": "ImageShaderMaterial",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/soba/abstractions/src/lib/image/image-shader-material.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "shaderMaterial(\n  {\n    color: new THREE.Color('white'),\n    scale: [1, 1],\n    imageBounds: [1, 1],\n    map: null,\n    zoom: 1,\n    grayscale: 0,\n  },\n  // language=glsl\n  `\n  varying vec2 vUv;\n  void main() {\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\n    vUv = uv;\n  }\n`,\n  // language=glsl\n  `\n  // mostly from https://gist.github.com/statico/df64c5d167362ecf7b34fca0b1459a44\n  varying vec2 vUv;\n  uniform vec2 scale;\n  uniform vec2 imageBounds;\n  uniform vec3 color;\n  uniform sampler2D map;\n  uniform float zoom;\n  uniform float grayscale;\n  const vec3 luma = vec3(.299, 0.587, 0.114);\n  vec4 toGrayscale(vec4 color, float intensity) {\n    return vec4(mix(color.rgb, vec3(dot(color.rgb, luma)), intensity), color.a);\n  }\n  vec2 aspect(vec2 size) {\n    return size / min(size.x, size.y);\n  }\n  void main() {\n    vec2 s = aspect(scale);\n    vec2 i = aspect(imageBounds);\n    float rs = s.x / s.y;\n    float ri = i.x / i.y;\n    vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\n    vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\n    vec2 uv = vUv * s / new + offset;\n    vec2 zUv = (uv - vec2(0.5, 0.5)) / zoom + vec2(0.5, 0.5);\n    gl_FragColor = toGrayscale(texture2D(map, zUv) * vec4(color, 1.0), grayscale);\n  }\n`\n)"
            },
            {
                "name": "initialSobaEnvironmentState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/soba/abstractions/src/lib/environment/environment.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "NgtSobaEnvironmentState",
                "defaultValue": "{\n  background: false,\n  files: ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'],\n  path: '',\n  oldBg: null,\n  oldEnv: null,\n  firstEnvironmentUpdate: false,\n  scene: undefined,\n  extensions: undefined,\n  texture: undefined,\n  map: undefined,\n}"
            },
            {
                "name": "initialSobaOrthographicCameraState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/soba/cameras/src/lib/orthographic-camera/orthographic-camera.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "SobaOrthographicCameraState",
                "defaultValue": "{}"
            },
            {
                "name": "initialSobaPositionalAudioState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/soba/abstractions/src/lib/positional-audio/positional-audio.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "SobaPositionalAudioState",
                "defaultValue": "{\n  url: '',\n  distance: 1,\n  loop: true,\n  listener: new THREE.AudioListener(),\n  sound: null,\n  autoplay: false,\n}"
            },
            {
                "name": "IsObject",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/soba/loaders/src/lib/texture-loader/texture-loader.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(url: any): url is Record<string, string> =>\n  url === Object(url) && !Array.isArray(url) && typeof url !== 'function'"
            },
            {
                "name": "NGT_SOBA_LINE_CONTROLLER_PROVIDER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/soba/abstractions/src/lib/line/line-watched-controller.di.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Provider[]",
                "defaultValue": "[\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  DestroyedService,\n  {\n    provide: NGT_SOBA_LINE_WATCHED_CONTROLLER,\n    deps: [\n      [new Optional(), NgtSobaLineController],\n      ChangeDetectorRef,\n      DestroyedService,\n    ],\n    useFactory: sobaLineWatchedControllerFactory,\n  },\n]"
            },
            {
                "name": "NGT_SOBA_LINE_WATCHED_CONTROLLER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/soba/abstractions/src/lib/line/line-watched-controller.di.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken(\n  'Watched Line Controller'\n)"
            },
            {
                "name": "Planes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/soba/abstractions/src/lib/billboard/billboard.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() =>\n  ({\n    template: `\n      <ngt-canvas\n        (created)=\"$event.gl.setClearColor('black')\"\n        [camera]='{ position: [0, 0, 10] }'\n      >\n        <ngt-stats></ngt-stats>\n\n        <ngt-ambient-light [intensity]='0.8'></ngt-ambient-light>\n        <ngt-point-light [intensity]='1' [position]='[0, 6, 0]'></ngt-point-light>\n\n        <ngt-orbit-controls\n          (ready)='$event.enablePan = true; $event.zoomSpeed = 0.5'\n        ></ngt-orbit-controls>\n\n        <ngt-soba-billboard #billboard='ngtSobaBillboard' [position]='[-4, -2, 0]'>\n          <ngt-soba-plane [appendTo]='billboard.group.object3d' [args]='[3, 2]'>\n            <ngt-mesh-standard-material\n              [parameters]=\"{ color: 'red' }\"\n            ></ngt-mesh-standard-material>\n          </ngt-soba-plane>\n        </ngt-soba-billboard>\n\n        <ngt-soba-billboard #billboardSecond='ngtSobaBillboard' [position]='[-4, 2, 0]'>\n          <ngt-soba-plane [appendTo]='billboardSecond.group.object3d' [args]='[3, 2]'>\n            <ngt-mesh-standard-material\n              [parameters]=\"{ color: 'orange' }\"\n            ></ngt-mesh-standard-material>\n          </ngt-soba-plane>\n        </ngt-soba-billboard>\n\n        <ngt-soba-billboard #billboardThird='ngtSobaBillboard' [position]='[0, 0, 0]'>\n          <ngt-soba-plane [appendTo]='billboardThird.group.object3d' [args]='[3, 2]'>\n            <ngt-mesh-standard-material\n              [parameters]=\"{ color: 'green' }\"\n            ></ngt-mesh-standard-material>\n          </ngt-soba-plane>\n        </ngt-soba-billboard>\n\n        <ngt-soba-billboard #billboardFourth='ngtSobaBillboard' [position]='[4, -2, 0]'>\n          <ngt-soba-plane [appendTo]='billboardFourth.group.object3d' [args]='[3, 2]'>\n            <ngt-mesh-standard-material\n              [parameters]=\"{ color: 'blue' }\"\n            ></ngt-mesh-standard-material>\n          </ngt-soba-plane>\n        </ngt-soba-billboard>\n  \n        <ngt-soba-billboard #billboardFifth='ngtSobaBillboard' [position]='[4, 2, 0]'>\n          <ngt-soba-plane [appendTo]='billboardFifth.group.object3d' [args]='[3, 2]'>\n            <ngt-mesh-standard-material\n              [parameters]=\"{ color: 'yellow' }\"\n            ></ngt-mesh-standard-material>\n          </ngt-soba-plane>\n        </ngt-soba-billboard>\n      </ngt-canvas>\n  `,\n  } as ReturnType<Story<NgtSobaBillboard>>)"
            },
            {
                "name": "presetsObj",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/soba/src/lib/presets.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  sunset: 'venice_sunset_1k.hdr',\n  dawn: 'kiara_1_dawn_1k.hdr',\n  night: 'dikhololo_night_1k.hdr',\n  warehouse: 'empty_warehouse_01_1k.hdr',\n  forest: 'forest_slope_1k.hdr',\n  apartment: 'lebombo_1k.hdr',\n  studio: 'studio_small_03_1k.hdr',\n  city: 'potsdamer_platz_1k.hdr',\n  park: 'rooitou_park_1k.hdr',\n  lobby: 'st_fagans_interior_1k.hdr',\n}"
            },
            {
                "name": "Text",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/soba/abstractions/src/lib/billboard/billboard.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() =>\n  ({\n    template: `\n      <ngt-canvas\n      (created)=\"$event.gl.setClearColor('black')\"\n      [camera]='{ position: [0, 0, 10] }'\n    >\n      <ngt-stats></ngt-stats>\n      <ngt-orbit-controls\n        (ready)='$event.enablePan = true; $event.zoomSpeed = 0.5'\n      ></ngt-orbit-controls>\n\n      <ngt-soba-billboard\n        #firstBillboard='ngtSobaBillboard'\n        [position]='[0.5, 2.05, 0.5]'\n      >\n        <ngt-soba-text\n          [appendTo]='firstBillboard.group.object3d'\n          [fontSize]='1'\n          outlineWidth='5%'\n          outlineColor='#000000'\n          [outlineOpacity]='1'\n        >\n          <ngt-soba-text-content> box</ngt-soba-text-content>\n        </ngt-soba-text>\n      </ngt-soba-billboard>\n\n      <ngt-soba-box [position]='[0.5, 1, 0.5]'>\n        <ngt-mesh-standard-material\n          [parameters]=\"{ color: 'red' }\"\n        ></ngt-mesh-standard-material>\n      </ngt-soba-box>\n\n      <ngt-group #group='ngtGroup' [position]='[-2.5, -3, -1]'>\n        <ngt-soba-billboard\n          #secondBillboard='ngtSobaBillboard'\n          [appendTo]='group.object3d'\n          [position]='[0, 1.05, 0]'\n        >\n          <ngt-soba-text\n            [appendTo]='secondBillboard.group.object3d'\n            [fontSize]='1'\n            outlineWidth='5%'\n            outlineColor='#000000'\n            [outlineOpacity]='1'\n          >\n            <ngt-soba-text-content> cone</ngt-soba-text-content>\n          </ngt-soba-text>\n        </ngt-soba-billboard>\n\n        <ngt-soba-cone>\n          <ngt-mesh-standard-material\n            [parameters]=\"{ color: 'green' }\"\n          ></ngt-mesh-standard-material>\n        </ngt-soba-cone>\n      </ngt-group>\n\n      <ngt-soba-billboard #billboard='ngtSobaBillboard' [position]='[0, 0, -5]'>\n        <ngt-soba-plane [appendTo]='billboard.group.object3d' [args]='[2, 2]'>\n          <ngt-mesh-standard-material\n            [parameters]=\"{ color: '#000066' }\"\n          ></ngt-mesh-standard-material>\n        </ngt-soba-plane>\n      </ngt-soba-billboard>\n\n      <ngt-ambient-light [intensity]='0.8'></ngt-ambient-light>\n      <ngt-point-light [intensity]='1' [position]='[0, 6, 0]'></ngt-point-light>\n    </ngt-canvas>\n    `,\n  } as ReturnType<Story<NgtSobaBillboard>>)"
            }
        ],
        "functions": [
            {
                "name": "shaderMaterial",
                "file": "packages/soba/abstractions/src/lib/shader-material/shader-material.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "uniforms",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "vertexShader",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fragmentShader",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "onInit",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "uniforms",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "vertexShader",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fragmentShader",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "onInit",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "sobaLineWatchedControllerFactory",
                "file": "packages/soba/abstractions/src/lib/line/line-watched-controller.di.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "controller",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "destroyed",
                        "type": "DestroyedService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "controller",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "destroyed",
                        "type": "DestroyedService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "PresetsType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "packages/soba/src/lib/presets.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "SobaImageShaderMaterialParameters",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "packages/soba/abstractions/src/lib/image/image-shader-material.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "packages/soba/abstractions/src/lib/environment/environment.directive.ts": [
                {
                    "name": "CUBEMAP_ROOT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/soba/abstractions/src/lib/environment/environment.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'https://rawcdn.githack.com/pmndrs/drei-assets/aa3600359ba664d546d05821bcbca42013587df2'"
                },
                {
                    "name": "initialSobaEnvironmentState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/soba/abstractions/src/lib/environment/environment.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgtSobaEnvironmentState",
                    "defaultValue": "{\n  background: false,\n  files: ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'],\n  path: '',\n  oldBg: null,\n  oldEnv: null,\n  firstEnvironmentUpdate: false,\n  scene: undefined,\n  extensions: undefined,\n  texture: undefined,\n  map: undefined,\n}"
                }
            ],
            "packages/soba/abstractions/src/lib/environment/environment.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/soba/abstractions/src/lib/environment/environment.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<NgtSobaEnvironment>",
                    "defaultValue": "(args) => {\n  return {\n    template: `\n    <ngt-canvas [camera]='{position: [0, 0, 10]}'>\n      <ngt-stats></ngt-stats>\n      <ngt-ambient-light [intensity]='0.8'></ngt-ambient-light>\n      <ngt-point-light [intensity]='1' [position]='[0, 6, 0]'></ngt-point-light>\n      <ngt-mesh>\n        <ngt-torus-knot-geometry [args]='[1, 0.5, 128, 32]'></ngt-torus-knot-geometry>\n        <ngt-mesh-standard-material [parameters]='{metalness: 1, roughness: 0}'></ngt-mesh-standard-material>\n      </ngt-mesh>\n      <ngt-soba-environment preset='warehouse' [background]='true'></ngt-soba-environment>\n\n      <ngt-orbit-controls\n        (ready)='$event.autoRotate = true;'\n        (animateReady)='$event.animateObject.update()'>\n      </ngt-orbit-controls>\n    </ngt-canvas>\n  `,\n  };\n}"
                }
            ],
            "packages/soba/abstractions/src/lib/image/image-shader-material.directive.ts": [
                {
                    "name": "ImageShaderMaterial",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/soba/abstractions/src/lib/image/image-shader-material.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "shaderMaterial(\n  {\n    color: new THREE.Color('white'),\n    scale: [1, 1],\n    imageBounds: [1, 1],\n    map: null,\n    zoom: 1,\n    grayscale: 0,\n  },\n  // language=glsl\n  `\n  varying vec2 vUv;\n  void main() {\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\n    vUv = uv;\n  }\n`,\n  // language=glsl\n  `\n  // mostly from https://gist.github.com/statico/df64c5d167362ecf7b34fca0b1459a44\n  varying vec2 vUv;\n  uniform vec2 scale;\n  uniform vec2 imageBounds;\n  uniform vec3 color;\n  uniform sampler2D map;\n  uniform float zoom;\n  uniform float grayscale;\n  const vec3 luma = vec3(.299, 0.587, 0.114);\n  vec4 toGrayscale(vec4 color, float intensity) {\n    return vec4(mix(color.rgb, vec3(dot(color.rgb, luma)), intensity), color.a);\n  }\n  vec2 aspect(vec2 size) {\n    return size / min(size.x, size.y);\n  }\n  void main() {\n    vec2 s = aspect(scale);\n    vec2 i = aspect(imageBounds);\n    float rs = s.x / s.y;\n    float ri = i.x / i.y;\n    vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\n    vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\n    vec2 uv = vUv * s / new + offset;\n    vec2 zUv = (uv - vec2(0.5, 0.5)) / zoom + vec2(0.5, 0.5);\n    gl_FragColor = toGrayscale(texture2D(map, zUv) * vec4(color, 1.0), grayscale);\n  }\n`\n)"
                }
            ],
            "packages/soba/cameras/src/lib/orthographic-camera/orthographic-camera.store.ts": [
                {
                    "name": "initialSobaOrthographicCameraState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/soba/cameras/src/lib/orthographic-camera/orthographic-camera.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SobaOrthographicCameraState",
                    "defaultValue": "{}"
                }
            ],
            "packages/soba/abstractions/src/lib/positional-audio/positional-audio.store.ts": [
                {
                    "name": "initialSobaPositionalAudioState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/soba/abstractions/src/lib/positional-audio/positional-audio.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SobaPositionalAudioState",
                    "defaultValue": "{\n  url: '',\n  distance: 1,\n  loop: true,\n  listener: new THREE.AudioListener(),\n  sound: null,\n  autoplay: false,\n}"
                }
            ],
            "packages/soba/loaders/src/lib/texture-loader/texture-loader.service.ts": [
                {
                    "name": "IsObject",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/soba/loaders/src/lib/texture-loader/texture-loader.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(url: any): url is Record<string, string> =>\n  url === Object(url) && !Array.isArray(url) && typeof url !== 'function'"
                }
            ],
            "packages/soba/abstractions/src/lib/line/line-watched-controller.di.ts": [
                {
                    "name": "NGT_SOBA_LINE_CONTROLLER_PROVIDER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/soba/abstractions/src/lib/line/line-watched-controller.di.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Provider[]",
                    "defaultValue": "[\n  NGT_OBJECT_3D_CONTROLLER_PROVIDER,\n  DestroyedService,\n  {\n    provide: NGT_SOBA_LINE_WATCHED_CONTROLLER,\n    deps: [\n      [new Optional(), NgtSobaLineController],\n      ChangeDetectorRef,\n      DestroyedService,\n    ],\n    useFactory: sobaLineWatchedControllerFactory,\n  },\n]"
                },
                {
                    "name": "NGT_SOBA_LINE_WATCHED_CONTROLLER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/soba/abstractions/src/lib/line/line-watched-controller.di.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken(\n  'Watched Line Controller'\n)"
                }
            ],
            "packages/soba/abstractions/src/lib/billboard/billboard.stories.ts": [
                {
                    "name": "Planes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/soba/abstractions/src/lib/billboard/billboard.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() =>\n  ({\n    template: `\n      <ngt-canvas\n        (created)=\"$event.gl.setClearColor('black')\"\n        [camera]='{ position: [0, 0, 10] }'\n      >\n        <ngt-stats></ngt-stats>\n\n        <ngt-ambient-light [intensity]='0.8'></ngt-ambient-light>\n        <ngt-point-light [intensity]='1' [position]='[0, 6, 0]'></ngt-point-light>\n\n        <ngt-orbit-controls\n          (ready)='$event.enablePan = true; $event.zoomSpeed = 0.5'\n        ></ngt-orbit-controls>\n\n        <ngt-soba-billboard #billboard='ngtSobaBillboard' [position]='[-4, -2, 0]'>\n          <ngt-soba-plane [appendTo]='billboard.group.object3d' [args]='[3, 2]'>\n            <ngt-mesh-standard-material\n              [parameters]=\"{ color: 'red' }\"\n            ></ngt-mesh-standard-material>\n          </ngt-soba-plane>\n        </ngt-soba-billboard>\n\n        <ngt-soba-billboard #billboardSecond='ngtSobaBillboard' [position]='[-4, 2, 0]'>\n          <ngt-soba-plane [appendTo]='billboardSecond.group.object3d' [args]='[3, 2]'>\n            <ngt-mesh-standard-material\n              [parameters]=\"{ color: 'orange' }\"\n            ></ngt-mesh-standard-material>\n          </ngt-soba-plane>\n        </ngt-soba-billboard>\n\n        <ngt-soba-billboard #billboardThird='ngtSobaBillboard' [position]='[0, 0, 0]'>\n          <ngt-soba-plane [appendTo]='billboardThird.group.object3d' [args]='[3, 2]'>\n            <ngt-mesh-standard-material\n              [parameters]=\"{ color: 'green' }\"\n            ></ngt-mesh-standard-material>\n          </ngt-soba-plane>\n        </ngt-soba-billboard>\n\n        <ngt-soba-billboard #billboardFourth='ngtSobaBillboard' [position]='[4, -2, 0]'>\n          <ngt-soba-plane [appendTo]='billboardFourth.group.object3d' [args]='[3, 2]'>\n            <ngt-mesh-standard-material\n              [parameters]=\"{ color: 'blue' }\"\n            ></ngt-mesh-standard-material>\n          </ngt-soba-plane>\n        </ngt-soba-billboard>\n  \n        <ngt-soba-billboard #billboardFifth='ngtSobaBillboard' [position]='[4, 2, 0]'>\n          <ngt-soba-plane [appendTo]='billboardFifth.group.object3d' [args]='[3, 2]'>\n            <ngt-mesh-standard-material\n              [parameters]=\"{ color: 'yellow' }\"\n            ></ngt-mesh-standard-material>\n          </ngt-soba-plane>\n        </ngt-soba-billboard>\n      </ngt-canvas>\n  `,\n  } as ReturnType<Story<NgtSobaBillboard>>)"
                },
                {
                    "name": "Text",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/soba/abstractions/src/lib/billboard/billboard.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() =>\n  ({\n    template: `\n      <ngt-canvas\n      (created)=\"$event.gl.setClearColor('black')\"\n      [camera]='{ position: [0, 0, 10] }'\n    >\n      <ngt-stats></ngt-stats>\n      <ngt-orbit-controls\n        (ready)='$event.enablePan = true; $event.zoomSpeed = 0.5'\n      ></ngt-orbit-controls>\n\n      <ngt-soba-billboard\n        #firstBillboard='ngtSobaBillboard'\n        [position]='[0.5, 2.05, 0.5]'\n      >\n        <ngt-soba-text\n          [appendTo]='firstBillboard.group.object3d'\n          [fontSize]='1'\n          outlineWidth='5%'\n          outlineColor='#000000'\n          [outlineOpacity]='1'\n        >\n          <ngt-soba-text-content> box</ngt-soba-text-content>\n        </ngt-soba-text>\n      </ngt-soba-billboard>\n\n      <ngt-soba-box [position]='[0.5, 1, 0.5]'>\n        <ngt-mesh-standard-material\n          [parameters]=\"{ color: 'red' }\"\n        ></ngt-mesh-standard-material>\n      </ngt-soba-box>\n\n      <ngt-group #group='ngtGroup' [position]='[-2.5, -3, -1]'>\n        <ngt-soba-billboard\n          #secondBillboard='ngtSobaBillboard'\n          [appendTo]='group.object3d'\n          [position]='[0, 1.05, 0]'\n        >\n          <ngt-soba-text\n            [appendTo]='secondBillboard.group.object3d'\n            [fontSize]='1'\n            outlineWidth='5%'\n            outlineColor='#000000'\n            [outlineOpacity]='1'\n          >\n            <ngt-soba-text-content> cone</ngt-soba-text-content>\n          </ngt-soba-text>\n        </ngt-soba-billboard>\n\n        <ngt-soba-cone>\n          <ngt-mesh-standard-material\n            [parameters]=\"{ color: 'green' }\"\n          ></ngt-mesh-standard-material>\n        </ngt-soba-cone>\n      </ngt-group>\n\n      <ngt-soba-billboard #billboard='ngtSobaBillboard' [position]='[0, 0, -5]'>\n        <ngt-soba-plane [appendTo]='billboard.group.object3d' [args]='[2, 2]'>\n          <ngt-mesh-standard-material\n            [parameters]=\"{ color: '#000066' }\"\n          ></ngt-mesh-standard-material>\n        </ngt-soba-plane>\n      </ngt-soba-billboard>\n\n      <ngt-ambient-light [intensity]='0.8'></ngt-ambient-light>\n      <ngt-point-light [intensity]='1' [position]='[0, 6, 0]'></ngt-point-light>\n    </ngt-canvas>\n    `,\n  } as ReturnType<Story<NgtSobaBillboard>>)"
                }
            ],
            "packages/soba/src/lib/presets.ts": [
                {
                    "name": "presetsObj",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/soba/src/lib/presets.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  sunset: 'venice_sunset_1k.hdr',\n  dawn: 'kiara_1_dawn_1k.hdr',\n  night: 'dikhololo_night_1k.hdr',\n  warehouse: 'empty_warehouse_01_1k.hdr',\n  forest: 'forest_slope_1k.hdr',\n  apartment: 'lebombo_1k.hdr',\n  studio: 'studio_small_03_1k.hdr',\n  city: 'potsdamer_platz_1k.hdr',\n  park: 'rooitou_park_1k.hdr',\n  lobby: 'st_fagans_interior_1k.hdr',\n}"
                }
            ]
        },
        "groupedFunctions": {
            "packages/soba/abstractions/src/lib/shader-material/shader-material.ts": [
                {
                    "name": "shaderMaterial",
                    "file": "packages/soba/abstractions/src/lib/shader-material/shader-material.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "uniforms",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "vertexShader",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fragmentShader",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "onInit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "uniforms",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "vertexShader",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fragmentShader",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "onInit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "packages/soba/abstractions/src/lib/line/line-watched-controller.di.ts": [
                {
                    "name": "sobaLineWatchedControllerFactory",
                    "file": "packages/soba/abstractions/src/lib/line/line-watched-controller.di.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "controller",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cdr",
                            "type": "ChangeDetectorRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "destroyed",
                            "type": "DestroyedService",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "controller",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cdr",
                            "type": "ChangeDetectorRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "destroyed",
                            "type": "DestroyedService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "packages/soba/src/lib/presets.ts": [
                {
                    "name": "PresetsType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "packages/soba/src/lib/presets.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "packages/soba/abstractions/src/lib/image/image-shader-material.directive.ts": [
                {
                    "name": "SobaImageShaderMaterialParameters",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "packages/soba/abstractions/src/lib/image/image-shader-material.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "packages/soba/abstractions/src/lib/billboard/billboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgtSobaBillboard",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "packages/soba/abstractions/src/lib/billboard/billboard.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Planes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/soba/abstractions/src/lib/billboard/billboard.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Text",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/soba/abstractions/src/lib/cubic-bezier-line/cubic-bezier-line.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgtSobaCubicBezierLine",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "packages/soba/abstractions/src/lib/environment/environment.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgtSobaEnvironment",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "packages/soba/abstractions/src/lib/environment/environment.directive.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NgtSobaEnvironmentState",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "packages/soba/abstractions/src/lib/environment/environment.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CUBEMAP_ROOT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/soba/abstractions/src/lib/environment/environment.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialSobaEnvironmentState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/soba/abstractions/src/lib/environment/environment.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/soba/abstractions/src/lib/image/image-shader-material.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgtSobaImageShaderMaterial",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/soba/abstractions/src/lib/image/image-shader-material.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ImageShaderMaterial",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/soba/abstractions/src/lib/image/image.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgtSobaImage",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "packages/soba/abstractions/src/lib/line/line-watched-controller.di.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "sobaLineWatchedControllerFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/soba/abstractions/src/lib/line/line-watched-controller.di.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NGT_SOBA_LINE_CONTROLLER_PROVIDER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/soba/abstractions/src/lib/line/line-watched-controller.di.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NGT_SOBA_LINE_WATCHED_CONTROLLER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/soba/abstractions/src/lib/line/line.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgtSobaLine",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "packages/soba/abstractions/src/lib/line/line.controller.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgtSobaLineController",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "packages/soba/abstractions/src/lib/positional-audio/positional-audio.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgtSobaPositionalAudio",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "packages/soba/abstractions/src/lib/positional-audio/positional-audio.store.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SobaPositionalAudioStore",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "packages/soba/abstractions/src/lib/positional-audio/positional-audio.store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SobaPositionalAudioState",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/soba/abstractions/src/lib/positional-audio/positional-audio.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialSobaPositionalAudioState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/soba/abstractions/src/lib/quadratic-bezier-line/quadratic-bezier-line.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgtSobaQuadraticBezierLine",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "packages/soba/abstractions/src/lib/shader-material/shader-material.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "shaderMaterial",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/soba/abstractions/src/lib/text/text-content.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgtSobaTextContent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/soba/abstractions/src/lib/text/text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgtSobaText",
                "coveragePercent": 0,
                "coverageCount": "0/33",
                "status": "low"
            },
            {
                "filePath": "packages/soba/cameras/src/lib/orthographic-camera/orthographic-camera.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgtSobaOrthographicCamera",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "packages/soba/cameras/src/lib/orthographic-camera/orthographic-camera.store.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SobaOrthographicCameraStore",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "packages/soba/cameras/src/lib/orthographic-camera/orthographic-camera.store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SobaOrthographicCameraState",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/soba/cameras/src/lib/orthographic-camera/orthographic-camera.store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateCameraEffectParams",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/soba/cameras/src/lib/orthographic-camera/orthographic-camera.store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateProjectMatrixEffectParams",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/soba/cameras/src/lib/orthographic-camera/orthographic-camera.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialSobaOrthographicCameraState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/soba/loaders/src/lib/texture-loader/texture-loader.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TextureLoaderService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/soba/loaders/src/lib/texture-loader/texture-loader.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IsObject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/soba/shapes/src/lib/box/box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgtSobaBox",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/soba/shapes/src/lib/circle/circle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgtSobaCircle",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/soba/shapes/src/lib/cone/cone.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgtSobaCone",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/soba/shapes/src/lib/cylinder/cylinder.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgtSobaCylinder",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/soba/shapes/src/lib/dodecahedron/dodecahedron.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgtSobaDodecahedron",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/soba/shapes/src/lib/extrude/extrude.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgtSobaExtrude",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/soba/shapes/src/lib/icosahedron/icosahedron.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgtSobaIcosahedron",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/soba/shapes/src/lib/lathe/lathe.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgtSobaLathe",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/soba/shapes/src/lib/octahedron/octahedron.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgtSobaOctahedron",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/soba/shapes/src/lib/parametric/parametric.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgtSobaParametric",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/soba/shapes/src/lib/plane/plane.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgtSobaPlane",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/soba/shapes/src/lib/polyhedron/polyhedron.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgtSobaPolyhedron",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/soba/shapes/src/lib/ring/ring.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgtSobaRing",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/soba/shapes/src/lib/sphere/sphere.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgtSobaSphere",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/soba/shapes/src/lib/tetrahedron/tetrahedron.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgtSobaTetrahedron",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/soba/shapes/src/lib/torus-knot/torus-knot.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgtSobaTorusKnot",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/soba/shapes/src/lib/torus/torus.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgtSobaTorus",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/soba/shapes/src/lib/tube/tube.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgtSobaTube",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/soba/src/lib/extender.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgtSobaExtender",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/soba/src/lib/presets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "presetsObj",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}